/*
 * JumpCloud APIs
 *  JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.SystemInsightsAlf;
import io.swagger.client.model.SystemInsightsApps;
import io.swagger.client.model.SystemInsightsBattery;
import io.swagger.client.model.SystemInsightsBitlockerInfo;
import io.swagger.client.model.SystemInsightsBrowserPlugins;
import io.swagger.client.model.SystemInsightsChromeExtensions;
import io.swagger.client.model.SystemInsightsCrashes;
import io.swagger.client.model.SystemInsightsDiskEncryption;
import io.swagger.client.model.SystemInsightsDiskInfo;
import io.swagger.client.model.SystemInsightsEtcHosts;
import io.swagger.client.model.SystemInsightsFirefoxAddons;
import io.swagger.client.model.SystemInsightsGroups;
import io.swagger.client.model.SystemInsightsIeExtensions;
import io.swagger.client.model.SystemInsightsInterfaceAddresses;
import io.swagger.client.model.SystemInsightsKernelInfo;
import io.swagger.client.model.SystemInsightsLaunchd;
import io.swagger.client.model.SystemInsightsLoggedInUsers;
import io.swagger.client.model.SystemInsightsLogicalDrvies;
import io.swagger.client.model.SystemInsightsManagedPolicies;
import io.swagger.client.model.SystemInsightsMounts;
import io.swagger.client.model.SystemInsightsOsVersion;
import io.swagger.client.model.SystemInsightsPatches;
import io.swagger.client.model.SystemInsightsPrograms;
import io.swagger.client.model.SystemInsightsSafariExtensions;
import io.swagger.client.model.SystemInsightsShadow;
import io.swagger.client.model.SystemInsightsSharedFolders;
import io.swagger.client.model.SystemInsightsSharedResources;
import io.swagger.client.model.SystemInsightsSharingPreferences;
import io.swagger.client.model.SystemInsightsSipConfig;
import io.swagger.client.model.SystemInsightsSystemControls;
import io.swagger.client.model.SystemInsightsSystemInfo;
import io.swagger.client.model.SystemInsightsUptime;
import io.swagger.client.model.SystemInsightsUsbDevices;
import io.swagger.client.model.SystemInsightsUserGroups;
import io.swagger.client.model.SystemInsightsUserSshKeys;
import io.swagger.client.model.SystemInsightsUsers;
import io.swagger.client.model.SystemInsightsWindowsCrashes;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for SystemInsightsApi
 */
@Ignore
public class SystemInsightsApiTest {

    private final SystemInsightsApi api = new SystemInsightsApi();

    
    /**
     * List System Insights ALF
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;global_state&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListAlfTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        List<String> filter = null;
        Integer skip = null;
        List<SystemInsightsAlf> response = api.systeminsightsListAlf(contentType, accept, limit, xOrgId, filter, skip);

        // TODO: test validations
    }
    
    /**
     * List System Insights Apps
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;bundle_name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListAppsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsApps> response = api.systeminsightsListApps(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights Battery
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;health&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListBatteryTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsBattery> response = api.systeminsightsListBattery(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights Bitlocker Info
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;protection_status&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListBitlockerInfoTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsBitlockerInfo> response = api.systeminsightsListBitlockerInfo(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Browser Plugins
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListBrowserPluginsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsBrowserPlugins> response = api.systeminsightsListBrowserPlugins(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Chrome Extensions
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListChromeExtensionsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsChromeExtensions> response = api.systeminsightsListChromeExtensions(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Crashes
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;identifier&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListCrashesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsCrashes> response = api.systeminsightsListCrashes(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights Disk Encryption
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;encryption_status&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListDiskEncryptionTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsDiskEncryption> response = api.systeminsightsListDiskEncryption(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Disk Info
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;disk_index&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListDiskInfoTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsDiskInfo> response = api.systeminsightsListDiskInfo(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Etc Hosts
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;address&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListEtcHostsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsEtcHosts> response = api.systeminsightsListEtcHosts(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Firefox Addons
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListFirefoxAddonsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsFirefoxAddons> response = api.systeminsightsListFirefoxAddons(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Groups
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;groupname&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListGroupsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsGroups> response = api.systeminsightsListGroups(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights IE Extensions
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListIeExtensionsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsIeExtensions> response = api.systeminsightsListIeExtensions(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights Interface Addresses
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;address&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListInterfaceAddressesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsInterfaceAddresses> response = api.systeminsightsListInterfaceAddresses(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Kernel Info
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;version&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListKernelInfoTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsKernelInfo> response = api.systeminsightsListKernelInfo(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Launchd
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListLaunchdTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsLaunchd> response = api.systeminsightsListLaunchd(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights Logged-In Users
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;user&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListLoggedInUsersTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsLoggedInUsers> response = api.systeminsightsListLoggedInUsers(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights Logical Drives
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;device_id&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListLogicalDrivesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsLogicalDrvies> response = api.systeminsightsListLogicalDrives(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Managed Policies
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;domain&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListManagedPoliciesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsManagedPolicies> response = api.systeminsightsListManagedPolicies(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights Mounts
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;path&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListMountsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsMounts> response = api.systeminsightsListMounts(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights OS Version
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;version&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListOsVersionTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsOsVersion> response = api.systeminsightsListOsVersion(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Patches
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;hotfix_id&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListPatchesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsPatches> response = api.systeminsightsListPatches(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Programs
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListProgramsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsPrograms> response = api.systeminsightsListPrograms(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Safari Extensions
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSafariExtensionsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsSafariExtensions> response = api.systeminsightsListSafariExtensions(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * LIst System Insights Shadow
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;username&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListShadowTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsShadow> response = api.systeminsightsListShadow(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights Shared Folders
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSharedFoldersTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsSharedFolders> response = api.systeminsightsListSharedFolders(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights Shared Resources
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;type&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSharedResourcesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsSharedResources> response = api.systeminsightsListSharedResources(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights Sharing Preferences
     *
     * Only valid filed field is &#x60;system_id&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSharingPreferencesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsSharingPreferences> response = api.systeminsightsListSharingPreferences(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights SIP Config
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;enabled&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSipConfigTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsSipConfig> response = api.systeminsightsListSipConfig(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Apps
     *
     * Valid filter fields are &#x60;bundle_name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemAppsTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsApps> response = api.systeminsightsListSystemApps(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Bitlocker Info
     *
     * Valid filter fields are &#x60;protection_status&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemBitlockerInfoTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsBitlockerInfo> response = api.systeminsightsListSystemBitlockerInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Browser Plugins
     *
     * Valid filter fields are &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemBrowserPluginsTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsBrowserPlugins> response = api.systeminsightsListSystemBrowserPlugins(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Chrome Extensions
     *
     * Valid filter fields are &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemChromeExtensionsTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsChromeExtensions> response = api.systeminsightsListSystemChromeExtensions(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Control
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemControlsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsSystemControls> response = api.systeminsightsListSystemControls(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Disk Encryption
     *
     * Valid filter fields are &#x60;encryption_status&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemDiskEncryptionTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsDiskEncryption> response = api.systeminsightsListSystemDiskEncryption(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Disk Info
     *
     * Valid filter fields are &#x60;disk_index&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemDiskInfoTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsBitlockerInfo> response = api.systeminsightsListSystemDiskInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Etc Hosts
     *
     * Valid filter fields are &#x60;address&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemEtcHostsTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsBitlockerInfo> response = api.systeminsightsListSystemEtcHosts(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Firefox Addons
     *
     * Valid filter fields are &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemFirefoxAddonsTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsFirefoxAddons> response = api.systeminsightsListSystemFirefoxAddons(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Groups
     *
     * Valid filter fields are &#x60;groupname&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemGroupsTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsGroups> response = api.systeminsightsListSystemGroups(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Info
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;cpu_subtype&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemInfoTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsSystemInfo> response = api.systeminsightsListSystemInfo(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Interface Addresses
     *
     * Valid filter fields are &#x60;address&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemInterfaceAddressesTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsInterfaceAddresses> response = api.systeminsightsListSystemInterfaceAddresses(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Kernel Info
     *
     * Valid filter fields are &#x60;version&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemKernelInfoTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsKernelInfo> response = api.systeminsightsListSystemKernelInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Logical Drives
     *
     * Valid filter fields are &#x60;device_id&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemLogicalDrivesTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsLogicalDrvies> response = api.systeminsightsListSystemLogicalDrives(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Mounts
     *
     * Valid filter fields are &#x60;path&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemMountsTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsMounts> response = api.systeminsightsListSystemMounts(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System OS Version
     *
     * Valid filter fields are &#x60;version&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemOsVersionTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsOsVersion> response = api.systeminsightsListSystemOsVersion(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Patches
     *
     * Valid filter fields are &#x60;hotfix_id  &#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemPatchesTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsPatches> response = api.systeminsightsListSystemPatches(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Programs
     *
     * Valid filter fields are &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemProgramsTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsPrograms> response = api.systeminsightsListSystemPrograms(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Safari Extensions
     *
     * Valid filter fields are &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemSafariExtensionsTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsSafariExtensions> response = api.systeminsightsListSystemSafariExtensions(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System System Controls
     *
     * Valid filter fields are &#x60;name&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemSystemControlsTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsSystemControls> response = api.systeminsightsListSystemSystemControls(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System System Info
     *
     * Valid filter fields are &#x60;cpu_subtype&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemSystemInfoTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsSystemInfo> response = api.systeminsightsListSystemSystemInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Uptime
     *
     * Valid filter fields are &#x60;days&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemUptimeTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsUptime> response = api.systeminsightsListSystemUptime(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights System Users
     *
     * Valid filter fields are &#x60;username&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListSystemUsersTest() throws ApiException {
        String systemId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsUsers> response = api.systeminsightsListSystemUsers(systemId, contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Uptime
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;days&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListUptimeTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsUptime> response = api.systeminsightsListUptime(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights USB Devices
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;model&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListUsbDevicesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsUsbDevices> response = api.systeminsightsListUsbDevices(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights User Groups
     *
     * Only valid filter field is &#x60;system_id&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListUserGroupsTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsUserGroups> response = api.systeminsightsListUserGroups(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights User SSH Keys
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;uid&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListUserSshKeysTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsUserSshKeys> response = api.systeminsightsListUserSshKeys(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
    /**
     * List System Insights Users
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;username&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListUsersTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> filter = null;
        String xOrgId = null;
        List<SystemInsightsUsers> response = api.systeminsightsListUsers(contentType, accept, limit, skip, filter, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List System Insights Windows Crashes
     *
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;type&#x60;.
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void systeminsightsListWindowsCrashesTest() throws ApiException {
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<SystemInsightsWindowsCrashes> response = api.systeminsightsListWindowsCrashes(contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
}
