/*
 * JumpCloud APIs
 *  JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiException;
import io.swagger.client.model.ActiveDirectoryAgentGetOutput;
import io.swagger.client.model.ActiveDirectoryAgentInput;
import io.swagger.client.model.ActiveDirectoryAgentListOutput;
import io.swagger.client.model.ActiveDirectoryInput;
import io.swagger.client.model.ActiveDirectoryOutput;
import io.swagger.client.model.GraphConnection;
import io.swagger.client.model.GraphManagementReq;
import io.swagger.client.model.GraphObjectWithPaths;
import org.junit.Test;
import org.junit.Ignore;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**
 * API tests for ActiveDirectoryApi
 */
@Ignore
public class ActiveDirectoryApiTest {

    private final ActiveDirectoryApi api = new ActiveDirectoryApi();

    
    /**
     * Delete Active Directory Agent
     *
     * 
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activedirectoriesAgentsDeleteTest() throws ApiException {
        String activedirectoryId = null;
        String agentId = null;
        String contentType = null;
        String accept = null;
        String xOrgId = null;
        api.activedirectoriesAgentsDelete(activedirectoryId, agentId, contentType, accept, xOrgId);

        // TODO: test validations
    }
    
    /**
     * Get Active Directory Agent
     *
     * This endpoint returns a specific active directory agent.  #### Sample Request &#x60;&#x60;&#x60; curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{activedirectory_id}/agents/{agent_id} \\   -H &#39;accept: application/json&#39; \\   -H &#39;content-type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39;   &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activedirectoriesAgentsGetTest() throws ApiException {
        String activedirectoryId = null;
        String agentId = null;
        String contentType = null;
        String accept = null;
        String xOrgId = null;
        ActiveDirectoryAgentListOutput response = api.activedirectoriesAgentsGet(activedirectoryId, agentId, contentType, accept, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List Active Directory Agents
     *
     * This endpoint allows you to list all your Active Directory Agents for a given Instance.  #### Sample Request &#x60;&#x60;&#x60; curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{activedirectory_id}/agents \\   -H &#39;accept: application/json&#39; \\   -H &#39;content-type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39;   &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activedirectoriesAgentsListTest() throws ApiException {
        String activedirectoryId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        List<String> sort = null;
        String xOrgId = null;
        List<ActiveDirectoryAgentListOutput> response = api.activedirectoriesAgentsList(activedirectoryId, contentType, accept, limit, skip, sort, xOrgId);

        // TODO: test validations
    }
    
    /**
     * Create a new Active Directory Agent
     *
     * This endpoint allows you to create a new Active Directory Agent.   #### Sample Request &#x60;&#x60;&#x60; curl -X POST https://console.jumpcloud.com/api/v2/activedirectories/{activedirectory_id}/agents \\   -H &#39;accept: application/json&#39; \\   -H &#39;content-type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; \\   -d &#39;{}&#39; &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activedirectoriesAgentsPostTest() throws ApiException {
        String activedirectoryId = null;
        String contentType = null;
        String accept = null;
        ActiveDirectoryAgentInput body = null;
        String xOrgId = null;
        ActiveDirectoryAgentGetOutput response = api.activedirectoriesAgentsPost(activedirectoryId, contentType, accept, body, xOrgId);

        // TODO: test validations
    }
    
    /**
     * Delete an Active Directory
     *
     * This endpoint allows you to delete an Active Directory Instance.  #### Sample Request &#x60;&#x60;&#x60; curl -X DELETE https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID} \\   -H &#39;accept: application/json&#39; \\   -H &#39;content-type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY&#39;   &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activedirectoriesDeleteTest() throws ApiException {
        String id = null;
        String contentType = null;
        String accept = null;
        String xOrgId = null;
        api.activedirectoriesDelete(id, contentType, accept, xOrgId);

        // TODO: test validations
    }
    
    /**
     * Get an Active Directory
     *
     * This endpoint returns a specific Active Directory.  #### Sample Request  &#x60;&#x60;&#x60; curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID} \\   -H &#39;accept: application/json&#39; \\   -H &#39;content-type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39;   &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activedirectoriesGetTest() throws ApiException {
        String id = null;
        String contentType = null;
        String accept = null;
        String xOrgId = null;
        ActiveDirectoryOutput response = api.activedirectoriesGet(id, contentType, accept, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List Active Directories
     *
     * This endpoint allows you to list all your Active Directory Instances.  #### Sample Request &#x60;&#x60;&#x60; curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/ \\   -H &#39;accept: application/json&#39; \\   -H &#39;content-type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39;   &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activedirectoriesListTest() throws ApiException {
        String contentType = null;
        String accept = null;
        List<String> fields = null;
        List<String> filter = null;
        Integer limit = null;
        Integer skip = null;
        List<String> sort = null;
        String xOrgId = null;
        List<ActiveDirectoryOutput> response = api.activedirectoriesList(contentType, accept, fields, filter, limit, skip, sort, xOrgId);

        // TODO: test validations
    }
    
    /**
     * Create a new Active Directory
     *
     * This endpoint allows you to create a new Active Directory.   #### Sample Request &#x60;&#x60;&#x60; curl -X POST https://console.jumpcloud.com/api/v2/activedirectories/ \\   -H &#39;accept: application/json&#39; \\   -H &#39;content-type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; \\   -d &#39;{         \&quot;domain\&quot;: \&quot;{DC&#x3D;AD_domain_name;DC&#x3D;com}\&quot; } &#39; &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void activedirectoriesPostTest() throws ApiException {
        String contentType = null;
        String accept = null;
        ActiveDirectoryInput body = null;
        String xOrgId = null;
        ActiveDirectoryOutput response = api.activedirectoriesPost(contentType, accept, body, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List the associations of an Active Directory instance
     *
     * This endpoint returns the direct associations of this Active Directory instance.  A direct association can be a non-homogeneous relationship between 2 different objects, for example Active Directory and Users.   #### Sample Request &#x60;&#x60;&#x60; curl -X GET &#39;https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/associations?targets&#x3D;user \\   -H &#39;accept: application/json&#39; \\   -H &#39;content-type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void graphActiveDirectoryAssociationsListTest() throws ApiException {
        String activedirectoryId = null;
        List<String> targets = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        Integer skip = null;
        String xOrgId = null;
        List<GraphConnection> response = api.graphActiveDirectoryAssociationsList(activedirectoryId, targets, contentType, accept, limit, skip, xOrgId);

        // TODO: test validations
    }
    
    /**
     * Manage the associations of an Active Directory instance
     *
     * This endpoint allows you to manage the _direct_ associations of an Active Directory instance.  A direct association can be a non-homogeneous relationship between 2 different objects, for example Active Directory and Users.  #### Sample Request &#x60;&#x60;&#x60; curl -X POST https://console.jumpcloud.com/api/v2/activedirectories/{AD_Instance_ID}/associations \\   -H &#39;accept: application/json&#39; \\   -H &#39;content-type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; \\   -d &#39;{         \&quot;op\&quot;: \&quot;add\&quot;,         \&quot;type\&quot;: \&quot;user\&quot;,         \&quot;id\&quot;: \&quot;{User_ID}\&quot; } &#39; &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void graphActiveDirectoryAssociationsPostTest() throws ApiException {
        String activedirectoryId = null;
        String contentType = null;
        String accept = null;
        GraphManagementReq body = null;
        String xOrgId = null;
        api.graphActiveDirectoryAssociationsPost(activedirectoryId, contentType, accept, body, xOrgId);

        // TODO: test validations
    }
    
    /**
     * List the User Groups bound to an Active Directory instance
     *
     * This endpoint will return all Users Groups bound to an Active Directory instance, either directly or indirectly, essentially traversing the JumpCloud Graph for your Organization.  Each element will contain the group&#39;s type, id, attributes and paths.  The &#x60;attributes&#x60; object is a key/value hash of compiled graph attributes for all paths followed.  The &#x60;paths&#x60; array enumerates each path from this Active Directory instance to the corresponding User Group; this array represents all grouping and/or associations that would have to be removed to deprovision the User Group from this Active Directory instance.  See &#x60;/members&#x60; and &#x60;/associations&#x60; endpoints to manage those collections.  #### Sample Request &#x60;&#x60;&#x60; curl -X GET https://console.jumpcloud.com/api/v2/activedirectories/{ActiveDirectory_ID}/usergroups \\   -H &#39;accept: application/json&#39; \\   -H &#39;content-type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; &#x60;&#x60;&#x60;
     *
     * @throws ApiException
     *          if the Api call fails
     */
    @Test
    public void graphActiveDirectoryTraverseUserGroupTest() throws ApiException {
        String activedirectoryId = null;
        String contentType = null;
        String accept = null;
        Integer limit = null;
        String xOrgId = null;
        Integer skip = null;
        List<String> filter = null;
        List<GraphObjectWithPaths> response = api.graphActiveDirectoryTraverseUserGroup(activedirectoryId, contentType, accept, limit, xOrgId, skip, filter);

        // TODO: test validations
    }
    
}
