/*
 * JumpCloud APIs
 *  JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.SystemInsightsApps;
import io.swagger.client.model.SystemInsightsBrowserPlugins;
import io.swagger.client.model.SystemInsightsChromeExtensions;
import io.swagger.client.model.SystemInsightsDiskEncryption;
import io.swagger.client.model.SystemInsightsFirefoxAddons;
import io.swagger.client.model.SystemInsightsGroups;
import io.swagger.client.model.SystemInsightsInterfaceAddresses;
import io.swagger.client.model.SystemInsightsMounts;
import io.swagger.client.model.SystemInsightsOsVersion;
import io.swagger.client.model.SystemInsightsSafariExtensions;
import io.swagger.client.model.SystemInsightsSystemInfo;
import io.swagger.client.model.SystemInsightsUsers;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SystemInsightsApi {
    private ApiClient apiClient;

    public SystemInsightsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SystemInsightsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for systeminsightsListApps
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListAppsCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListAppsValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListAppsCall(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Apps
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;bundle_name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsApps&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsApps> systeminsightsListApps(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsApps>> resp = systeminsightsListAppsWithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Apps
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;bundle_name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsApps&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsApps>> systeminsightsListAppsWithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListAppsValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsApps>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Apps (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;bundle_name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListAppsAsync(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsApps>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListAppsValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsApps>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListApps_0
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListApps_0Call(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/apps"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListApps_0ValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListApps_0(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListApps_0Call(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Apps
     * Valid filter fields are &#x60;bundle_name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsApps&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsApps> systeminsightsListApps_0(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsApps>> resp = systeminsightsListApps_0WithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System Apps
     * Valid filter fields are &#x60;bundle_name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsApps&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsApps>> systeminsightsListApps_0WithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListApps_0ValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsApps>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Apps (asynchronously)
     * Valid filter fields are &#x60;bundle_name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListApps_0Async(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsApps>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListApps_0ValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsApps>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListBrowserPlugins
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListBrowserPluginsCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/browser_plugins"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListBrowserPluginsValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListBrowserPlugins(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListBrowserPluginsCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Browser Plugins
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsBrowserPlugins&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsBrowserPlugins> systeminsightsListBrowserPlugins(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsBrowserPlugins>> resp = systeminsightsListBrowserPluginsWithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System Browser Plugins
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsBrowserPlugins&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsBrowserPlugins>> systeminsightsListBrowserPluginsWithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListBrowserPluginsValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBrowserPlugins>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Browser Plugins (asynchronously)
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListBrowserPluginsAsync(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsBrowserPlugins>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListBrowserPluginsValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBrowserPlugins>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListBrowserPlugins_0
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListBrowserPlugins_0Call(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/browser_plugins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListBrowserPlugins_0ValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListBrowserPlugins_0Call(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Browser Plugins
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsBrowserPlugins&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsBrowserPlugins> systeminsightsListBrowserPlugins_0(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsBrowserPlugins>> resp = systeminsightsListBrowserPlugins_0WithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Browser Plugins
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsBrowserPlugins&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsBrowserPlugins>> systeminsightsListBrowserPlugins_0WithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListBrowserPlugins_0ValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBrowserPlugins>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Browser Plugins (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListBrowserPlugins_0Async(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsBrowserPlugins>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListBrowserPlugins_0ValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBrowserPlugins>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListChromeExtensions
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListChromeExtensionsCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/chrome_extensions"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListChromeExtensionsValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListChromeExtensions(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListChromeExtensionsCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Chrome Extensions
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsChromeExtensions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsChromeExtensions> systeminsightsListChromeExtensions(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsChromeExtensions>> resp = systeminsightsListChromeExtensionsWithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System Chrome Extensions
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsChromeExtensions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsChromeExtensions>> systeminsightsListChromeExtensionsWithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListChromeExtensionsValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsChromeExtensions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Chrome Extensions (asynchronously)
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListChromeExtensionsAsync(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsChromeExtensions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListChromeExtensionsValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsChromeExtensions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListChromeExtensions_0
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListChromeExtensions_0Call(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/chrome_extensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListChromeExtensions_0ValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListChromeExtensions_0Call(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Chrome Extensions
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsChromeExtensions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsChromeExtensions> systeminsightsListChromeExtensions_0(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsChromeExtensions>> resp = systeminsightsListChromeExtensions_0WithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Chrome Extensions
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsChromeExtensions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsChromeExtensions>> systeminsightsListChromeExtensions_0WithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListChromeExtensions_0ValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsChromeExtensions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Chrome Extensions (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListChromeExtensions_0Async(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsChromeExtensions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListChromeExtensions_0ValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsChromeExtensions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListDiskEncryption
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListDiskEncryptionCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/disk_encryption";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListDiskEncryptionValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListDiskEncryptionCall(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Disk Encryption
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;encryption_status&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsDiskEncryption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsDiskEncryption> systeminsightsListDiskEncryption(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsDiskEncryption>> resp = systeminsightsListDiskEncryptionWithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Disk Encryption
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;encryption_status&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsDiskEncryption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsDiskEncryption>> systeminsightsListDiskEncryptionWithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListDiskEncryptionValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsDiskEncryption>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Disk Encryption (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;encryption_status&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListDiskEncryptionAsync(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsDiskEncryption>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListDiskEncryptionValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsDiskEncryption>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListDiskEncryption_0
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListDiskEncryption_0Call(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/disk_encryption"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListDiskEncryption_0ValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListDiskEncryption_0(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListDiskEncryption_0Call(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Disk Encryption
     * Valid filter fields are &#x60;encryption_status&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsDiskEncryption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsDiskEncryption> systeminsightsListDiskEncryption_0(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsDiskEncryption>> resp = systeminsightsListDiskEncryption_0WithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System Disk Encryption
     * Valid filter fields are &#x60;encryption_status&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsDiskEncryption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsDiskEncryption>> systeminsightsListDiskEncryption_0WithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListDiskEncryption_0ValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsDiskEncryption>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Disk Encryption (asynchronously)
     * Valid filter fields are &#x60;encryption_status&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListDiskEncryption_0Async(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsDiskEncryption>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListDiskEncryption_0ValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsDiskEncryption>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListFirefoxAddons
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListFirefoxAddonsCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/firefox_addons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListFirefoxAddonsValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListFirefoxAddonsCall(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Firefox Addons
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsFirefoxAddons&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsFirefoxAddons> systeminsightsListFirefoxAddons(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsFirefoxAddons>> resp = systeminsightsListFirefoxAddonsWithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Firefox Addons
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsFirefoxAddons&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsFirefoxAddons>> systeminsightsListFirefoxAddonsWithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListFirefoxAddonsValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsFirefoxAddons>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Firefox Addons (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListFirefoxAddonsAsync(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsFirefoxAddons>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListFirefoxAddonsValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsFirefoxAddons>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListFirefoxAddons_0
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListFirefoxAddons_0Call(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/firefox_addons"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListFirefoxAddons_0ValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListFirefoxAddons_0(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListFirefoxAddons_0Call(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Firefox Addons
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsFirefoxAddons&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsFirefoxAddons> systeminsightsListFirefoxAddons_0(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsFirefoxAddons>> resp = systeminsightsListFirefoxAddons_0WithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System Firefox Addons
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsFirefoxAddons&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsFirefoxAddons>> systeminsightsListFirefoxAddons_0WithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListFirefoxAddons_0ValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsFirefoxAddons>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Firefox Addons (asynchronously)
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListFirefoxAddons_0Async(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsFirefoxAddons>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListFirefoxAddons_0ValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsFirefoxAddons>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListGroups
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListGroupsCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListGroupsValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListGroupsCall(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Groups
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;groupname&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsGroups> systeminsightsListGroups(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsGroups>> resp = systeminsightsListGroupsWithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Groups
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;groupname&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsGroups&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsGroups>> systeminsightsListGroupsWithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListGroupsValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsGroups>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Groups (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;groupname&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListGroupsAsync(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsGroups>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListGroupsValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsGroups>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListGroups_0
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListGroups_0Call(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/groups"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListGroups_0ValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListGroups_0(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListGroups_0Call(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Groups
     * Valid filter fields are &#x60;groupname&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsGroups> systeminsightsListGroups_0(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsGroups>> resp = systeminsightsListGroups_0WithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System Groups
     * Valid filter fields are &#x60;groupname&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsGroups&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsGroups>> systeminsightsListGroups_0WithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListGroups_0ValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsGroups>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Groups (asynchronously)
     * Valid filter fields are &#x60;groupname&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListGroups_0Async(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsGroups>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListGroups_0ValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsGroups>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListInterfaceAddresses
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListInterfaceAddressesCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/interface_addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListInterfaceAddressesValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListInterfaceAddressesCall(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Interface Addresses
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;address&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsInterfaceAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsInterfaceAddresses> systeminsightsListInterfaceAddresses(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsInterfaceAddresses>> resp = systeminsightsListInterfaceAddressesWithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Interface Addresses
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;address&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsInterfaceAddresses&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsInterfaceAddresses>> systeminsightsListInterfaceAddressesWithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListInterfaceAddressesValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsInterfaceAddresses>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Interface Addresses (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;address&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListInterfaceAddressesAsync(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsInterfaceAddresses>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListInterfaceAddressesValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsInterfaceAddresses>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListInterfaceAddresses_0
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListInterfaceAddresses_0Call(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/interface_addresses"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListInterfaceAddresses_0ValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListInterfaceAddresses_0(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListInterfaceAddresses_0Call(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Interface Addresses
     * Valid filter fields are &#x60;address&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsInterfaceAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsInterfaceAddresses> systeminsightsListInterfaceAddresses_0(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsInterfaceAddresses>> resp = systeminsightsListInterfaceAddresses_0WithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System Interface Addresses
     * Valid filter fields are &#x60;address&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsInterfaceAddresses&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsInterfaceAddresses>> systeminsightsListInterfaceAddresses_0WithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListInterfaceAddresses_0ValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsInterfaceAddresses>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Interface Addresses (asynchronously)
     * Valid filter fields are &#x60;address&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListInterfaceAddresses_0Async(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsInterfaceAddresses>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListInterfaceAddresses_0ValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsInterfaceAddresses>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListMounts
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListMountsCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/mounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListMountsValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListMountsCall(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Mounts
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;path&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsMounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsMounts> systeminsightsListMounts(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsMounts>> resp = systeminsightsListMountsWithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Mounts
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;path&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsMounts&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsMounts>> systeminsightsListMountsWithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListMountsValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsMounts>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Mounts (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;path&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListMountsAsync(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsMounts>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListMountsValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsMounts>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListMounts_0
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListMounts_0Call(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/mounts"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListMounts_0ValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListMounts_0(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListMounts_0Call(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Mounts
     * Valid filter fields are &#x60;path&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsMounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsMounts> systeminsightsListMounts_0(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsMounts>> resp = systeminsightsListMounts_0WithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System Mounts
     * Valid filter fields are &#x60;path&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsMounts&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsMounts>> systeminsightsListMounts_0WithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListMounts_0ValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsMounts>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Mounts (asynchronously)
     * Valid filter fields are &#x60;path&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListMounts_0Async(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsMounts>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListMounts_0ValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsMounts>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListOsVersion
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListOsVersionCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/os_version"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListOsVersionValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListOsVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListOsVersionCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System OS Version
     * Valid filter fields are &#x60;version&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsOsVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsOsVersion> systeminsightsListOsVersion(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsOsVersion>> resp = systeminsightsListOsVersionWithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System OS Version
     * Valid filter fields are &#x60;version&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsOsVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsOsVersion>> systeminsightsListOsVersionWithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListOsVersionValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsOsVersion>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System OS Version (asynchronously)
     * Valid filter fields are &#x60;version&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListOsVersionAsync(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsOsVersion>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListOsVersionValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsOsVersion>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListOsVersion_0
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListOsVersion_0Call(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/os_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListOsVersion_0ValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListOsVersion_0Call(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights OS Version
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;version&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsOsVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsOsVersion> systeminsightsListOsVersion_0(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsOsVersion>> resp = systeminsightsListOsVersion_0WithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights OS Version
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;version&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsOsVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsOsVersion>> systeminsightsListOsVersion_0WithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListOsVersion_0ValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsOsVersion>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights OS Version (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;version&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListOsVersion_0Async(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsOsVersion>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListOsVersion_0ValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsOsVersion>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSafariExtensions
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSafariExtensionsCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/safari_extensions"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSafariExtensionsValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListSafariExtensions(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSafariExtensionsCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Safari Extensions
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsSafariExtensions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSafariExtensions> systeminsightsListSafariExtensions(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsSafariExtensions>> resp = systeminsightsListSafariExtensionsWithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System Safari Extensions
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsSafariExtensions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSafariExtensions>> systeminsightsListSafariExtensionsWithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSafariExtensionsValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSafariExtensions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Safari Extensions (asynchronously)
     * Valid filter fields are &#x60;name&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSafariExtensionsAsync(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsSafariExtensions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSafariExtensionsValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSafariExtensions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSafariExtensions_0
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSafariExtensions_0Call(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/safari_extensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSafariExtensions_0ValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListSafariExtensions_0Call(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Safari Extensions
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsSafariExtensions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSafariExtensions> systeminsightsListSafariExtensions_0(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsSafariExtensions>> resp = systeminsightsListSafariExtensions_0WithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Safari Extensions
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsSafariExtensions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSafariExtensions>> systeminsightsListSafariExtensions_0WithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSafariExtensions_0ValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSafariExtensions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Safari Extensions (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;name&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSafariExtensions_0Async(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsSafariExtensions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSafariExtensions_0ValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSafariExtensions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemInfo
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemInfoCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/system_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemInfoValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListSystemInfoCall(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Info
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;cpu_subtype&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsSystemInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSystemInfo> systeminsightsListSystemInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsSystemInfo>> resp = systeminsightsListSystemInfoWithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System Info
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;cpu_subtype&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsSystemInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSystemInfo>> systeminsightsListSystemInfoWithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemInfoValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Info (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;cpu_subtype&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemInfoAsync(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsSystemInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemInfoValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemInfo_0
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemInfo_0Call(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/system_info"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemInfo_0ValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListSystemInfo_0(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemInfo_0Call(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System System Info
     * Valid filter fields are &#x60;cpu_subtype&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsSystemInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSystemInfo> systeminsightsListSystemInfo_0(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsSystemInfo>> resp = systeminsightsListSystemInfo_0WithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System System Info
     * Valid filter fields are &#x60;cpu_subtype&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsSystemInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSystemInfo>> systeminsightsListSystemInfo_0WithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemInfo_0ValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System System Info (asynchronously)
     * Valid filter fields are &#x60;cpu_subtype&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemInfo_0Async(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsSystemInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemInfo_0ValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListUsers
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUsersCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListUsersValidateBeforeCall(Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = systeminsightsListUsersCall(limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Users
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;username&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsUsers> systeminsightsListUsers(Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsUsers>> resp = systeminsightsListUsersWithHttpInfo(limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Users
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;username&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsUsers&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsUsers>> systeminsightsListUsersWithHttpInfo(Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListUsersValidateBeforeCall(limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUsers>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Users (asynchronously)
     * Valid filter fields are &#x60;jc_system_id&#x60; and &#x60;username&#x60;.
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUsersAsync(Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsUsers>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListUsersValidateBeforeCall(limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUsers>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListUsers_0
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUsers_0Call(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{jc_system_id}/users"
            .replaceAll("\\{" + "jc_system_id" + "\\}", apiClient.escapeString(jcSystemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListUsers_0ValidateBeforeCall(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'jcSystemId' is set
        if (jcSystemId == null) {
            throw new ApiException("Missing the required parameter 'jcSystemId' when calling systeminsightsListUsers_0(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListUsers_0Call(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Users
     * Valid filter fields are &#x60;username&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsUsers> systeminsightsListUsers_0(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsUsers>> resp = systeminsightsListUsers_0WithHttpInfo(jcSystemId, limit, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights System Users
     * Valid filter fields are &#x60;username&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsUsers&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsUsers>> systeminsightsListUsers_0WithHttpInfo(String jcSystemId, Integer limit, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListUsers_0ValidateBeforeCall(jcSystemId, limit, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUsers>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Users (asynchronously)
     * Valid filter fields are &#x60;username&#x60;.
     * @param jcSystemId  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUsers_0Async(String jcSystemId, Integer limit, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsUsers>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListUsers_0ValidateBeforeCall(jcSystemId, limit, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUsers>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
