/*
 * JumpCloud APIs
 *  JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.SystemInsightsAlf;
import io.swagger.client.model.SystemInsightsApps;
import io.swagger.client.model.SystemInsightsBattery;
import io.swagger.client.model.SystemInsightsBitlockerInfo;
import io.swagger.client.model.SystemInsightsBrowserPlugins;
import io.swagger.client.model.SystemInsightsChromeExtensions;
import io.swagger.client.model.SystemInsightsCrashes;
import io.swagger.client.model.SystemInsightsDiskEncryption;
import io.swagger.client.model.SystemInsightsDiskInfo;
import io.swagger.client.model.SystemInsightsEtcHosts;
import io.swagger.client.model.SystemInsightsFirefoxAddons;
import io.swagger.client.model.SystemInsightsGroups;
import io.swagger.client.model.SystemInsightsIeExtensions;
import io.swagger.client.model.SystemInsightsInterfaceAddresses;
import io.swagger.client.model.SystemInsightsKernelInfo;
import io.swagger.client.model.SystemInsightsLaunchd;
import io.swagger.client.model.SystemInsightsLoggedInUsers;
import io.swagger.client.model.SystemInsightsLogicalDrvies;
import io.swagger.client.model.SystemInsightsManagedPolicies;
import io.swagger.client.model.SystemInsightsMounts;
import io.swagger.client.model.SystemInsightsOsVersion;
import io.swagger.client.model.SystemInsightsPatches;
import io.swagger.client.model.SystemInsightsPrograms;
import io.swagger.client.model.SystemInsightsSafariExtensions;
import io.swagger.client.model.SystemInsightsShadow;
import io.swagger.client.model.SystemInsightsSharedFolders;
import io.swagger.client.model.SystemInsightsSharedResources;
import io.swagger.client.model.SystemInsightsSharingPreferences;
import io.swagger.client.model.SystemInsightsSipConfig;
import io.swagger.client.model.SystemInsightsSystemControls;
import io.swagger.client.model.SystemInsightsSystemInfo;
import io.swagger.client.model.SystemInsightsUptime;
import io.swagger.client.model.SystemInsightsUsbDevices;
import io.swagger.client.model.SystemInsightsUserGroups;
import io.swagger.client.model.SystemInsightsUserSshKeys;
import io.swagger.client.model.SystemInsightsUsers;
import io.swagger.client.model.SystemInsightsWindowsCrashes;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SystemInsightsApi {
    private ApiClient apiClient;

    public SystemInsightsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SystemInsightsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for systeminsightsListAlf
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param filter Supported operators are: eq (optional)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListAlfCall(String contentType, String accept, Integer limit, String xOrgId, List<String> filter, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/alf";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListAlfValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, List<String> filter, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListAlf(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListAlf(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListAlfCall(contentType, accept, limit, xOrgId, filter, skip, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights ALF
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;global_state&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param filter Supported operators are: eq (optional)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @return List&lt;SystemInsightsAlf&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsAlf> systeminsightsListAlf(String contentType, String accept, Integer limit, String xOrgId, List<String> filter, Integer skip) throws ApiException {
        ApiResponse<List<SystemInsightsAlf>> resp = systeminsightsListAlfWithHttpInfo(contentType, accept, limit, xOrgId, filter, skip);
        return resp.getData();
    }

    /**
     * List System Insights ALF
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;global_state&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param filter Supported operators are: eq (optional)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @return ApiResponse&lt;List&lt;SystemInsightsAlf&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsAlf>> systeminsightsListAlfWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, List<String> filter, Integer skip) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListAlfValidateBeforeCall(contentType, accept, limit, xOrgId, filter, skip, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsAlf>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights ALF (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;global_state&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param filter Supported operators are: eq (optional)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListAlfAsync(String contentType, String accept, Integer limit, String xOrgId, List<String> filter, Integer skip, final ApiCallback<List<SystemInsightsAlf>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListAlfValidateBeforeCall(contentType, accept, limit, xOrgId, filter, skip, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsAlf>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListApps
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListAppsCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/apps";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListAppsValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListApps(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListApps(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListAppsCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Apps
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;bundle_name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsApps&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsApps> systeminsightsListApps(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsApps>> resp = systeminsightsListAppsWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Apps
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;bundle_name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsApps&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsApps>> systeminsightsListAppsWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListAppsValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsApps>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Apps (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;bundle_name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListAppsAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsApps>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListAppsValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsApps>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListBattery
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListBatteryCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/battery";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListBatteryValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListBattery(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListBattery(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListBatteryCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Battery
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;health&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsBattery&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsBattery> systeminsightsListBattery(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsBattery>> resp = systeminsightsListBatteryWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Battery
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;health&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsBattery&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsBattery>> systeminsightsListBatteryWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListBatteryValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBattery>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Battery (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;health&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListBatteryAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsBattery>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListBatteryValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBattery>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListBitlockerInfo
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListBitlockerInfoCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/bitlocker_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListBitlockerInfoValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListBitlockerInfo(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListBitlockerInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListBitlockerInfoCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Bitlocker Info
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;protection_status&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsBitlockerInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsBitlockerInfo> systeminsightsListBitlockerInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsBitlockerInfo>> resp = systeminsightsListBitlockerInfoWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Bitlocker Info
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;protection_status&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsBitlockerInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsBitlockerInfo>> systeminsightsListBitlockerInfoWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListBitlockerInfoValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBitlockerInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Bitlocker Info (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;protection_status&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListBitlockerInfoAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsBitlockerInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListBitlockerInfoValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBitlockerInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListBrowserPlugins
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListBrowserPluginsCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/browser_plugins";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListBrowserPluginsValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListBrowserPlugins(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListBrowserPlugins(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListBrowserPluginsCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Browser Plugins
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsBrowserPlugins&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsBrowserPlugins> systeminsightsListBrowserPlugins(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsBrowserPlugins>> resp = systeminsightsListBrowserPluginsWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Browser Plugins
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsBrowserPlugins&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsBrowserPlugins>> systeminsightsListBrowserPluginsWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListBrowserPluginsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBrowserPlugins>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Browser Plugins (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListBrowserPluginsAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsBrowserPlugins>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListBrowserPluginsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBrowserPlugins>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListChromeExtensions
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListChromeExtensionsCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/chrome_extensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListChromeExtensionsValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListChromeExtensions(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListChromeExtensions(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListChromeExtensionsCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Chrome Extensions
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsChromeExtensions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsChromeExtensions> systeminsightsListChromeExtensions(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsChromeExtensions>> resp = systeminsightsListChromeExtensionsWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Chrome Extensions
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsChromeExtensions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsChromeExtensions>> systeminsightsListChromeExtensionsWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListChromeExtensionsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsChromeExtensions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Chrome Extensions (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListChromeExtensionsAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsChromeExtensions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListChromeExtensionsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsChromeExtensions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListCrashes
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListCrashesCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/crashes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListCrashesValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListCrashes(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListCrashes(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListCrashesCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Crashes
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;identifier&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsCrashes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsCrashes> systeminsightsListCrashes(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsCrashes>> resp = systeminsightsListCrashesWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Crashes
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;identifier&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsCrashes&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsCrashes>> systeminsightsListCrashesWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListCrashesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsCrashes>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Crashes (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;identifier&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListCrashesAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsCrashes>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListCrashesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsCrashes>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListDiskEncryption
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListDiskEncryptionCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/disk_encryption";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListDiskEncryptionValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListDiskEncryption(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListDiskEncryption(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListDiskEncryptionCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Disk Encryption
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;encryption_status&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsDiskEncryption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsDiskEncryption> systeminsightsListDiskEncryption(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsDiskEncryption>> resp = systeminsightsListDiskEncryptionWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Disk Encryption
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;encryption_status&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsDiskEncryption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsDiskEncryption>> systeminsightsListDiskEncryptionWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListDiskEncryptionValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsDiskEncryption>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Disk Encryption (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;encryption_status&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListDiskEncryptionAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsDiskEncryption>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListDiskEncryptionValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsDiskEncryption>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListDiskInfo
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListDiskInfoCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/disk_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListDiskInfoValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListDiskInfo(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListDiskInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListDiskInfoCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Disk Info
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;disk_index&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsDiskInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsDiskInfo> systeminsightsListDiskInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsDiskInfo>> resp = systeminsightsListDiskInfoWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Disk Info
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;disk_index&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsDiskInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsDiskInfo>> systeminsightsListDiskInfoWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListDiskInfoValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsDiskInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Disk Info (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;disk_index&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListDiskInfoAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsDiskInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListDiskInfoValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsDiskInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListEtcHosts
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListEtcHostsCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/etc_hosts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListEtcHostsValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListEtcHosts(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListEtcHosts(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListEtcHostsCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Etc Hosts
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;address&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsEtcHosts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsEtcHosts> systeminsightsListEtcHosts(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsEtcHosts>> resp = systeminsightsListEtcHostsWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Etc Hosts
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;address&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsEtcHosts&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsEtcHosts>> systeminsightsListEtcHostsWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListEtcHostsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsEtcHosts>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Etc Hosts (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;address&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListEtcHostsAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsEtcHosts>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListEtcHostsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsEtcHosts>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListFirefoxAddons
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListFirefoxAddonsCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/firefox_addons";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListFirefoxAddonsValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListFirefoxAddons(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListFirefoxAddons(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListFirefoxAddonsCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Firefox Addons
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsFirefoxAddons&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsFirefoxAddons> systeminsightsListFirefoxAddons(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsFirefoxAddons>> resp = systeminsightsListFirefoxAddonsWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Firefox Addons
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsFirefoxAddons&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsFirefoxAddons>> systeminsightsListFirefoxAddonsWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListFirefoxAddonsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsFirefoxAddons>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Firefox Addons (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListFirefoxAddonsAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsFirefoxAddons>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListFirefoxAddonsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsFirefoxAddons>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListGroups
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListGroupsCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListGroupsValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListGroups(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListGroups(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListGroupsCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Groups
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;groupname&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsGroups> systeminsightsListGroups(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsGroups>> resp = systeminsightsListGroupsWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Groups
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;groupname&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsGroups&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsGroups>> systeminsightsListGroupsWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListGroupsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsGroups>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Groups (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;groupname&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListGroupsAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsGroups>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListGroupsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsGroups>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListIeExtensions
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListIeExtensionsCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/ie_extensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListIeExtensionsValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListIeExtensions(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListIeExtensions(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListIeExtensionsCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights IE Extensions
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsIeExtensions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsIeExtensions> systeminsightsListIeExtensions(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsIeExtensions>> resp = systeminsightsListIeExtensionsWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights IE Extensions
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsIeExtensions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsIeExtensions>> systeminsightsListIeExtensionsWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListIeExtensionsValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsIeExtensions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights IE Extensions (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListIeExtensionsAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsIeExtensions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListIeExtensionsValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsIeExtensions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListInterfaceAddresses
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListInterfaceAddressesCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/interface_addresses";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListInterfaceAddressesValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListInterfaceAddresses(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListInterfaceAddresses(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListInterfaceAddressesCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Interface Addresses
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;address&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsInterfaceAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsInterfaceAddresses> systeminsightsListInterfaceAddresses(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsInterfaceAddresses>> resp = systeminsightsListInterfaceAddressesWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Interface Addresses
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;address&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsInterfaceAddresses&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsInterfaceAddresses>> systeminsightsListInterfaceAddressesWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListInterfaceAddressesValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsInterfaceAddresses>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Interface Addresses (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;address&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListInterfaceAddressesAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsInterfaceAddresses>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListInterfaceAddressesValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsInterfaceAddresses>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListKernelInfo
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListKernelInfoCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/kernel_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListKernelInfoValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListKernelInfo(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListKernelInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListKernelInfoCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Kernel Info
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;version&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsKernelInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsKernelInfo> systeminsightsListKernelInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsKernelInfo>> resp = systeminsightsListKernelInfoWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Kernel Info
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;version&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsKernelInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsKernelInfo>> systeminsightsListKernelInfoWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListKernelInfoValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsKernelInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Kernel Info (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;version&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListKernelInfoAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsKernelInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListKernelInfoValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsKernelInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListLaunchd
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListLaunchdCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/launchd";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListLaunchdValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListLaunchd(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListLaunchd(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListLaunchdCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Launchd
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsLaunchd&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsLaunchd> systeminsightsListLaunchd(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsLaunchd>> resp = systeminsightsListLaunchdWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Launchd
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsLaunchd&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsLaunchd>> systeminsightsListLaunchdWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListLaunchdValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsLaunchd>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Launchd (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListLaunchdAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsLaunchd>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListLaunchdValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsLaunchd>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListLoggedInUsers
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListLoggedInUsersCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/logged_in_users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListLoggedInUsersValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListLoggedInUsers(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListLoggedInUsers(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListLoggedInUsersCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Logged-In Users
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;user&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsLoggedInUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsLoggedInUsers> systeminsightsListLoggedInUsers(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsLoggedInUsers>> resp = systeminsightsListLoggedInUsersWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Logged-In Users
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;user&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsLoggedInUsers&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsLoggedInUsers>> systeminsightsListLoggedInUsersWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListLoggedInUsersValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsLoggedInUsers>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Logged-In Users (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;user&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListLoggedInUsersAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsLoggedInUsers>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListLoggedInUsersValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsLoggedInUsers>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListLogicalDrives
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListLogicalDrivesCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/logical_drives";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListLogicalDrivesValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListLogicalDrives(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListLogicalDrives(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListLogicalDrivesCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Logical Drives
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;device_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsLogicalDrvies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsLogicalDrvies> systeminsightsListLogicalDrives(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsLogicalDrvies>> resp = systeminsightsListLogicalDrivesWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Logical Drives
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;device_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsLogicalDrvies&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsLogicalDrvies>> systeminsightsListLogicalDrivesWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListLogicalDrivesValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsLogicalDrvies>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Logical Drives (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;device_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListLogicalDrivesAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsLogicalDrvies>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListLogicalDrivesValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsLogicalDrvies>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListManagedPolicies
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListManagedPoliciesCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/managed_policies";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListManagedPoliciesValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListManagedPolicies(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListManagedPolicies(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListManagedPoliciesCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Managed Policies
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;domain&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsManagedPolicies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsManagedPolicies> systeminsightsListManagedPolicies(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsManagedPolicies>> resp = systeminsightsListManagedPoliciesWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Managed Policies
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;domain&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsManagedPolicies&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsManagedPolicies>> systeminsightsListManagedPoliciesWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListManagedPoliciesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsManagedPolicies>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Managed Policies (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;domain&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListManagedPoliciesAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsManagedPolicies>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListManagedPoliciesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsManagedPolicies>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListMounts
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListMountsCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/mounts";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListMountsValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListMounts(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListMounts(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListMountsCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Mounts
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;path&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsMounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsMounts> systeminsightsListMounts(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsMounts>> resp = systeminsightsListMountsWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Mounts
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;path&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsMounts&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsMounts>> systeminsightsListMountsWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListMountsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsMounts>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Mounts (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;path&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListMountsAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsMounts>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListMountsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsMounts>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListOsVersion
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListOsVersionCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/os_version";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListOsVersionValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListOsVersion(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListOsVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListOsVersionCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights OS Version
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;version&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsOsVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsOsVersion> systeminsightsListOsVersion(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsOsVersion>> resp = systeminsightsListOsVersionWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights OS Version
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;version&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsOsVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsOsVersion>> systeminsightsListOsVersionWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListOsVersionValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsOsVersion>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights OS Version (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;version&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListOsVersionAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsOsVersion>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListOsVersionValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsOsVersion>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListPatches
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListPatchesCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/patches";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListPatchesValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListPatches(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListPatches(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListPatchesCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Patches
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;hotfix_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsPatches&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsPatches> systeminsightsListPatches(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsPatches>> resp = systeminsightsListPatchesWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Patches
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;hotfix_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsPatches&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsPatches>> systeminsightsListPatchesWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListPatchesValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsPatches>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Patches (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;hotfix_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListPatchesAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsPatches>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListPatchesValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsPatches>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListPrograms
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListProgramsCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/programs";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListProgramsValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListPrograms(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListPrograms(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListProgramsCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Programs
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsPrograms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsPrograms> systeminsightsListPrograms(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsPrograms>> resp = systeminsightsListProgramsWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Programs
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsPrograms&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsPrograms>> systeminsightsListProgramsWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListProgramsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsPrograms>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Programs (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListProgramsAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsPrograms>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListProgramsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsPrograms>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSafariExtensions
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSafariExtensionsCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/safari_extensions";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSafariExtensionsValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSafariExtensions(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSafariExtensions(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSafariExtensionsCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Safari Extensions
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsSafariExtensions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSafariExtensions> systeminsightsListSafariExtensions(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsSafariExtensions>> resp = systeminsightsListSafariExtensionsWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Safari Extensions
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsSafariExtensions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSafariExtensions>> systeminsightsListSafariExtensionsWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSafariExtensionsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSafariExtensions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Safari Extensions (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSafariExtensionsAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsSafariExtensions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSafariExtensionsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSafariExtensions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListShadow
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListShadowCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/shadow";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListShadowValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListShadow(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListShadow(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListShadowCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * LIst System Insights Shadow
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;username&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsShadow&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsShadow> systeminsightsListShadow(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsShadow>> resp = systeminsightsListShadowWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * LIst System Insights Shadow
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;username&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsShadow&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsShadow>> systeminsightsListShadowWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListShadowValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsShadow>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * LIst System Insights Shadow (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;username&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListShadowAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsShadow>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListShadowValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsShadow>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSharedFolders
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSharedFoldersCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/shared_folders";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSharedFoldersValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSharedFolders(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSharedFolders(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSharedFoldersCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Shared Folders
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsSharedFolders&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSharedFolders> systeminsightsListSharedFolders(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsSharedFolders>> resp = systeminsightsListSharedFoldersWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Shared Folders
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsSharedFolders&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSharedFolders>> systeminsightsListSharedFoldersWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSharedFoldersValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSharedFolders>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Shared Folders (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSharedFoldersAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsSharedFolders>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSharedFoldersValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSharedFolders>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSharedResources
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSharedResourcesCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/shared_resources";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] {  };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSharedResourcesValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSharedResources(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSharedResources(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSharedResourcesCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Shared Resources
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;type&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsSharedResources&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSharedResources> systeminsightsListSharedResources(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsSharedResources>> resp = systeminsightsListSharedResourcesWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Shared Resources
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;type&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsSharedResources&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSharedResources>> systeminsightsListSharedResourcesWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSharedResourcesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSharedResources>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Shared Resources (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;type&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSharedResourcesAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsSharedResources>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSharedResourcesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSharedResources>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSharingPreferences
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSharingPreferencesCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/sharing_preferences";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSharingPreferencesValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSharingPreferences(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSharingPreferences(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSharingPreferencesCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Sharing Preferences
     * Only valid filed field is &#x60;system_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsSharingPreferences&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSharingPreferences> systeminsightsListSharingPreferences(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsSharingPreferences>> resp = systeminsightsListSharingPreferencesWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Sharing Preferences
     * Only valid filed field is &#x60;system_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsSharingPreferences&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSharingPreferences>> systeminsightsListSharingPreferencesWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSharingPreferencesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSharingPreferences>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Sharing Preferences (asynchronously)
     * Only valid filed field is &#x60;system_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSharingPreferencesAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsSharingPreferences>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSharingPreferencesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSharingPreferences>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSipConfig
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSipConfigCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/sip_config";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSipConfigValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSipConfig(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSipConfig(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSipConfigCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights SIP Config
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;enabled&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsSipConfig&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSipConfig> systeminsightsListSipConfig(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsSipConfig>> resp = systeminsightsListSipConfigWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights SIP Config
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;enabled&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsSipConfig&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSipConfig>> systeminsightsListSipConfigWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSipConfigValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSipConfig>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights SIP Config (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;enabled&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSipConfigAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsSipConfig>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSipConfigValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSipConfig>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemApps
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemAppsCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/apps"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemAppsValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemApps(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemApps(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemApps(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemAppsCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Apps
     * Valid filter fields are &#x60;bundle_name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsApps&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsApps> systeminsightsListSystemApps(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsApps>> resp = systeminsightsListSystemAppsWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Apps
     * Valid filter fields are &#x60;bundle_name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsApps&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsApps>> systeminsightsListSystemAppsWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemAppsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsApps>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Apps (asynchronously)
     * Valid filter fields are &#x60;bundle_name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemAppsAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsApps>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemAppsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsApps>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemBitlockerInfo
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemBitlockerInfoCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/bitlocker_info"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemBitlockerInfoValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemBitlockerInfo(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemBitlockerInfo(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemBitlockerInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemBitlockerInfoCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Bitlocker Info
     * Valid filter fields are &#x60;protection_status&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsBitlockerInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsBitlockerInfo> systeminsightsListSystemBitlockerInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsBitlockerInfo>> resp = systeminsightsListSystemBitlockerInfoWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Bitlocker Info
     * Valid filter fields are &#x60;protection_status&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsBitlockerInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsBitlockerInfo>> systeminsightsListSystemBitlockerInfoWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemBitlockerInfoValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBitlockerInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Bitlocker Info (asynchronously)
     * Valid filter fields are &#x60;protection_status&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemBitlockerInfoAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsBitlockerInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemBitlockerInfoValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBitlockerInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemBrowserPlugins
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemBrowserPluginsCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/browser_plugins"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemBrowserPluginsValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemBrowserPlugins(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemBrowserPlugins(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemBrowserPlugins(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemBrowserPluginsCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Browser Plugins
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsBrowserPlugins&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsBrowserPlugins> systeminsightsListSystemBrowserPlugins(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsBrowserPlugins>> resp = systeminsightsListSystemBrowserPluginsWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Browser Plugins
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsBrowserPlugins&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsBrowserPlugins>> systeminsightsListSystemBrowserPluginsWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemBrowserPluginsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBrowserPlugins>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Browser Plugins (asynchronously)
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemBrowserPluginsAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsBrowserPlugins>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemBrowserPluginsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBrowserPlugins>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemChromeExtensions
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemChromeExtensionsCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/chrome_extensions"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemChromeExtensionsValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemChromeExtensions(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemChromeExtensions(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemChromeExtensions(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemChromeExtensionsCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Chrome Extensions
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsChromeExtensions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsChromeExtensions> systeminsightsListSystemChromeExtensions(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsChromeExtensions>> resp = systeminsightsListSystemChromeExtensionsWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Chrome Extensions
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsChromeExtensions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsChromeExtensions>> systeminsightsListSystemChromeExtensionsWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemChromeExtensionsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsChromeExtensions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Chrome Extensions (asynchronously)
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemChromeExtensionsAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsChromeExtensions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemChromeExtensionsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsChromeExtensions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemControls
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemControlsCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/system_controls";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemControlsValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemControls(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemControls(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemControlsCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Control
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsSystemControls&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSystemControls> systeminsightsListSystemControls(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsSystemControls>> resp = systeminsightsListSystemControlsWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Control
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsSystemControls&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSystemControls>> systeminsightsListSystemControlsWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemControlsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemControls>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Control (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;name&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemControlsAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsSystemControls>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemControlsValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemControls>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemDiskEncryption
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemDiskEncryptionCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/disk_encryption"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemDiskEncryptionValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemDiskEncryption(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemDiskEncryption(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemDiskEncryption(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemDiskEncryptionCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Disk Encryption
     * Valid filter fields are &#x60;encryption_status&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsDiskEncryption&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsDiskEncryption> systeminsightsListSystemDiskEncryption(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsDiskEncryption>> resp = systeminsightsListSystemDiskEncryptionWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Disk Encryption
     * Valid filter fields are &#x60;encryption_status&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsDiskEncryption&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsDiskEncryption>> systeminsightsListSystemDiskEncryptionWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemDiskEncryptionValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsDiskEncryption>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Disk Encryption (asynchronously)
     * Valid filter fields are &#x60;encryption_status&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemDiskEncryptionAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsDiskEncryption>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemDiskEncryptionValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsDiskEncryption>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemDiskInfo
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemDiskInfoCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/disk_info"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemDiskInfoValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemDiskInfo(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemDiskInfo(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemDiskInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemDiskInfoCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Disk Info
     * Valid filter fields are &#x60;disk_index&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsBitlockerInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsBitlockerInfo> systeminsightsListSystemDiskInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsBitlockerInfo>> resp = systeminsightsListSystemDiskInfoWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Disk Info
     * Valid filter fields are &#x60;disk_index&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsBitlockerInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsBitlockerInfo>> systeminsightsListSystemDiskInfoWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemDiskInfoValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBitlockerInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Disk Info (asynchronously)
     * Valid filter fields are &#x60;disk_index&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemDiskInfoAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsBitlockerInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemDiskInfoValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBitlockerInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemEtcHosts
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemEtcHostsCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/etc_hosts"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemEtcHostsValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemEtcHosts(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemEtcHosts(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemEtcHosts(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemEtcHostsCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Etc Hosts
     * Valid filter fields are &#x60;address&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsBitlockerInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsBitlockerInfo> systeminsightsListSystemEtcHosts(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsBitlockerInfo>> resp = systeminsightsListSystemEtcHostsWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Etc Hosts
     * Valid filter fields are &#x60;address&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsBitlockerInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsBitlockerInfo>> systeminsightsListSystemEtcHostsWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemEtcHostsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBitlockerInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Etc Hosts (asynchronously)
     * Valid filter fields are &#x60;address&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemEtcHostsAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsBitlockerInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemEtcHostsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsBitlockerInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemFirefoxAddons
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemFirefoxAddonsCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/firefox_addons"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemFirefoxAddonsValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemFirefoxAddons(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemFirefoxAddons(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemFirefoxAddons(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemFirefoxAddonsCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Firefox Addons
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsFirefoxAddons&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsFirefoxAddons> systeminsightsListSystemFirefoxAddons(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsFirefoxAddons>> resp = systeminsightsListSystemFirefoxAddonsWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Firefox Addons
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsFirefoxAddons&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsFirefoxAddons>> systeminsightsListSystemFirefoxAddonsWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemFirefoxAddonsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsFirefoxAddons>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Firefox Addons (asynchronously)
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemFirefoxAddonsAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsFirefoxAddons>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemFirefoxAddonsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsFirefoxAddons>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemGroups
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemGroupsCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/groups"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemGroupsValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemGroups(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemGroups(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemGroups(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemGroupsCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Groups
     * Valid filter fields are &#x60;groupname&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsGroups> systeminsightsListSystemGroups(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsGroups>> resp = systeminsightsListSystemGroupsWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Groups
     * Valid filter fields are &#x60;groupname&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsGroups&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsGroups>> systeminsightsListSystemGroupsWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemGroupsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsGroups>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Groups (asynchronously)
     * Valid filter fields are &#x60;groupname&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemGroupsAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsGroups>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemGroupsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsGroups>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemInfo
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemInfoCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/system_info";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemInfoValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemInfo(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemInfoCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Info
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;cpu_subtype&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsSystemInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSystemInfo> systeminsightsListSystemInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsSystemInfo>> resp = systeminsightsListSystemInfoWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Info
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;cpu_subtype&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsSystemInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSystemInfo>> systeminsightsListSystemInfoWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemInfoValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Info (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;cpu_subtype&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemInfoAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsSystemInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemInfoValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemInterfaceAddresses
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemInterfaceAddressesCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/interface_addresses"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemInterfaceAddressesValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemInterfaceAddresses(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemInterfaceAddresses(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemInterfaceAddresses(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemInterfaceAddressesCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Interface Addresses
     * Valid filter fields are &#x60;address&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsInterfaceAddresses&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsInterfaceAddresses> systeminsightsListSystemInterfaceAddresses(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsInterfaceAddresses>> resp = systeminsightsListSystemInterfaceAddressesWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Interface Addresses
     * Valid filter fields are &#x60;address&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsInterfaceAddresses&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsInterfaceAddresses>> systeminsightsListSystemInterfaceAddressesWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemInterfaceAddressesValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsInterfaceAddresses>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Interface Addresses (asynchronously)
     * Valid filter fields are &#x60;address&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemInterfaceAddressesAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsInterfaceAddresses>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemInterfaceAddressesValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsInterfaceAddresses>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemKernelInfo
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemKernelInfoCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/kernel_info"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemKernelInfoValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemKernelInfo(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemKernelInfo(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemKernelInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemKernelInfoCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Kernel Info
     * Valid filter fields are &#x60;version&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsKernelInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsKernelInfo> systeminsightsListSystemKernelInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsKernelInfo>> resp = systeminsightsListSystemKernelInfoWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Kernel Info
     * Valid filter fields are &#x60;version&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsKernelInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsKernelInfo>> systeminsightsListSystemKernelInfoWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemKernelInfoValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsKernelInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Kernel Info (asynchronously)
     * Valid filter fields are &#x60;version&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemKernelInfoAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsKernelInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemKernelInfoValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsKernelInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemLogicalDrives
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemLogicalDrivesCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/logical_drives"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemLogicalDrivesValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemLogicalDrives(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemLogicalDrives(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemLogicalDrives(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemLogicalDrivesCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Logical Drives
     * Valid filter fields are &#x60;device_id&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsLogicalDrvies&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsLogicalDrvies> systeminsightsListSystemLogicalDrives(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsLogicalDrvies>> resp = systeminsightsListSystemLogicalDrivesWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Logical Drives
     * Valid filter fields are &#x60;device_id&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsLogicalDrvies&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsLogicalDrvies>> systeminsightsListSystemLogicalDrivesWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemLogicalDrivesValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsLogicalDrvies>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Logical Drives (asynchronously)
     * Valid filter fields are &#x60;device_id&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemLogicalDrivesAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsLogicalDrvies>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemLogicalDrivesValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsLogicalDrvies>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemMounts
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemMountsCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/mounts"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemMountsValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemMounts(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemMounts(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemMounts(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemMountsCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Mounts
     * Valid filter fields are &#x60;path&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsMounts&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsMounts> systeminsightsListSystemMounts(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsMounts>> resp = systeminsightsListSystemMountsWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Mounts
     * Valid filter fields are &#x60;path&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsMounts&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsMounts>> systeminsightsListSystemMountsWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemMountsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsMounts>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Mounts (asynchronously)
     * Valid filter fields are &#x60;path&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemMountsAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsMounts>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemMountsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsMounts>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemOsVersion
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemOsVersionCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/os_version"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemOsVersionValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemOsVersion(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemOsVersion(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemOsVersion(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemOsVersionCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System OS Version
     * Valid filter fields are &#x60;version&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsOsVersion&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsOsVersion> systeminsightsListSystemOsVersion(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsOsVersion>> resp = systeminsightsListSystemOsVersionWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System OS Version
     * Valid filter fields are &#x60;version&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsOsVersion&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsOsVersion>> systeminsightsListSystemOsVersionWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemOsVersionValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsOsVersion>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System OS Version (asynchronously)
     * Valid filter fields are &#x60;version&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemOsVersionAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsOsVersion>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemOsVersionValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsOsVersion>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemPatches
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemPatchesCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/patches"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemPatchesValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemPatches(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemPatches(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemPatches(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemPatchesCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Patches
     * Valid filter fields are &#x60;hotfix_id  &#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsPatches&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsPatches> systeminsightsListSystemPatches(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsPatches>> resp = systeminsightsListSystemPatchesWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Patches
     * Valid filter fields are &#x60;hotfix_id  &#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsPatches&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsPatches>> systeminsightsListSystemPatchesWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemPatchesValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsPatches>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Patches (asynchronously)
     * Valid filter fields are &#x60;hotfix_id  &#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemPatchesAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsPatches>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemPatchesValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsPatches>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemPrograms
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemProgramsCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/programs"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemProgramsValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemPrograms(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemPrograms(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemPrograms(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemProgramsCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Programs
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsPrograms&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsPrograms> systeminsightsListSystemPrograms(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsPrograms>> resp = systeminsightsListSystemProgramsWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Programs
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsPrograms&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsPrograms>> systeminsightsListSystemProgramsWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemProgramsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsPrograms>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Programs (asynchronously)
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemProgramsAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsPrograms>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemProgramsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsPrograms>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemSafariExtensions
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemSafariExtensionsCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/safari_extensions"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemSafariExtensionsValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemSafariExtensions(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemSafariExtensions(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemSafariExtensions(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemSafariExtensionsCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Safari Extensions
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsSafariExtensions&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSafariExtensions> systeminsightsListSystemSafariExtensions(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsSafariExtensions>> resp = systeminsightsListSystemSafariExtensionsWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Safari Extensions
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsSafariExtensions&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSafariExtensions>> systeminsightsListSystemSafariExtensionsWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemSafariExtensionsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSafariExtensions>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Safari Extensions (asynchronously)
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemSafariExtensionsAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsSafariExtensions>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemSafariExtensionsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSafariExtensions>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemSystemControls
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemSystemControlsCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/system_controls"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemSystemControlsValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemSystemControls(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemSystemControls(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemSystemControls(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemSystemControlsCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System System Controls
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsSystemControls&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSystemControls> systeminsightsListSystemSystemControls(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsSystemControls>> resp = systeminsightsListSystemSystemControlsWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System System Controls
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsSystemControls&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSystemControls>> systeminsightsListSystemSystemControlsWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemSystemControlsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemControls>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System System Controls (asynchronously)
     * Valid filter fields are &#x60;name&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemSystemControlsAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsSystemControls>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemSystemControlsValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemControls>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemSystemInfo
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemSystemInfoCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/system_info"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemSystemInfoValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemSystemInfo(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemSystemInfo(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemSystemInfo(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemSystemInfoCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System System Info
     * Valid filter fields are &#x60;cpu_subtype&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsSystemInfo&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsSystemInfo> systeminsightsListSystemSystemInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsSystemInfo>> resp = systeminsightsListSystemSystemInfoWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System System Info
     * Valid filter fields are &#x60;cpu_subtype&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsSystemInfo&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsSystemInfo>> systeminsightsListSystemSystemInfoWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemSystemInfoValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemInfo>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System System Info (asynchronously)
     * Valid filter fields are &#x60;cpu_subtype&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemSystemInfoAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsSystemInfo>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemSystemInfoValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsSystemInfo>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemUptime
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemUptimeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/uptime"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemUptimeValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemUptime(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemUptime(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemUptime(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemUptimeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Uptime
     * Valid filter fields are &#x60;days&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsUptime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsUptime> systeminsightsListSystemUptime(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsUptime>> resp = systeminsightsListSystemUptimeWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Uptime
     * Valid filter fields are &#x60;days&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsUptime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsUptime>> systeminsightsListSystemUptimeWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemUptimeValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUptime>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Uptime (asynchronously)
     * Valid filter fields are &#x60;days&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemUptimeAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsUptime>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemUptimeValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUptime>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListSystemUsers
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemUsersCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/{system_id}/users"
            .replaceAll("\\{" + "system_id" + "\\}", apiClient.escapeString(systemId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListSystemUsersValidateBeforeCall(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'systemId' is set
        if (systemId == null) {
            throw new ApiException("Missing the required parameter 'systemId' when calling systeminsightsListSystemUsers(Async)");
        }
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListSystemUsers(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListSystemUsers(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListSystemUsersCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights System Users
     * Valid filter fields are &#x60;username&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsUsers> systeminsightsListSystemUsers(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsUsers>> resp = systeminsightsListSystemUsersWithHttpInfo(systemId, contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights System Users
     * Valid filter fields are &#x60;username&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsUsers&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsUsers>> systeminsightsListSystemUsersWithHttpInfo(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListSystemUsersValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUsers>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights System Users (asynchronously)
     * Valid filter fields are &#x60;username&#x60;.
     * @param systemId  (required)
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListSystemUsersAsync(String systemId, String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsUsers>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListSystemUsersValidateBeforeCall(systemId, contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUsers>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListUptime
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUptimeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/uptime";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListUptimeValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListUptime(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListUptime(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListUptimeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Uptime
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;days&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsUptime&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsUptime> systeminsightsListUptime(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsUptime>> resp = systeminsightsListUptimeWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Uptime
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;days&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsUptime&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsUptime>> systeminsightsListUptimeWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListUptimeValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUptime>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Uptime (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;days&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUptimeAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsUptime>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListUptimeValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUptime>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListUsbDevices
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUsbDevicesCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/usb_devices";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListUsbDevicesValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListUsbDevices(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListUsbDevices(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListUsbDevicesCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights USB Devices
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;model&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsUsbDevices&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsUsbDevices> systeminsightsListUsbDevices(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsUsbDevices>> resp = systeminsightsListUsbDevicesWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights USB Devices
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;model&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsUsbDevices&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsUsbDevices>> systeminsightsListUsbDevicesWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListUsbDevicesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUsbDevices>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights USB Devices (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;model&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUsbDevicesAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsUsbDevices>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListUsbDevicesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUsbDevices>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListUserGroups
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUserGroupsCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/user_groups";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListUserGroupsValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListUserGroups(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListUserGroups(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListUserGroupsCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights User Groups
     * Only valid filter field is &#x60;system_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsUserGroups&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsUserGroups> systeminsightsListUserGroups(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsUserGroups>> resp = systeminsightsListUserGroupsWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights User Groups
     * Only valid filter field is &#x60;system_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsUserGroups&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsUserGroups>> systeminsightsListUserGroupsWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListUserGroupsValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUserGroups>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights User Groups (asynchronously)
     * Only valid filter field is &#x60;system_id&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUserGroupsAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsUserGroups>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListUserGroupsValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUserGroups>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListUserSshKeys
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUserSshKeysCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/user_ssh_keys";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListUserSshKeysValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListUserSshKeys(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListUserSshKeys(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListUserSshKeysCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights User SSH Keys
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;uid&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsUserSshKeys&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsUserSshKeys> systeminsightsListUserSshKeys(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsUserSshKeys>> resp = systeminsightsListUserSshKeysWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights User SSH Keys
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;uid&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsUserSshKeys&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsUserSshKeys>> systeminsightsListUserSshKeysWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListUserSshKeysValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUserSshKeys>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights User SSH Keys (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;uid&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUserSshKeysAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsUserSshKeys>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListUserSshKeysValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUserSshKeys>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListUsers
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUsersCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/users";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListUsersValidateBeforeCall(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListUsers(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListUsers(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListUsersCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Users
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;username&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return List&lt;SystemInsightsUsers&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsUsers> systeminsightsListUsers(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        ApiResponse<List<SystemInsightsUsers>> resp = systeminsightsListUsersWithHttpInfo(contentType, accept, limit, skip, filter, xOrgId);
        return resp.getData();
    }

    /**
     * List System Insights Users
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;username&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @return ApiResponse&lt;List&lt;SystemInsightsUsers&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsUsers>> systeminsightsListUsersWithHttpInfo(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListUsersValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUsers>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Users (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;username&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param xOrgId  (optional, default to )
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListUsersAsync(String contentType, String accept, Integer limit, Integer skip, List<String> filter, String xOrgId, final ApiCallback<List<SystemInsightsUsers>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListUsersValidateBeforeCall(contentType, accept, limit, skip, filter, xOrgId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsUsers>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for systeminsightsListWindowsCrashes
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListWindowsCrashesCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/systeminsights/windows_crashes";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (xOrgId != null)
        localVarHeaderParams.put("x-org-id", apiClient.parameterToString(xOrgId));
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call systeminsightsListWindowsCrashesValidateBeforeCall(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'contentType' is set
        if (contentType == null) {
            throw new ApiException("Missing the required parameter 'contentType' when calling systeminsightsListWindowsCrashes(Async)");
        }
        
        // verify the required parameter 'accept' is set
        if (accept == null) {
            throw new ApiException("Missing the required parameter 'accept' when calling systeminsightsListWindowsCrashes(Async)");
        }
        

        com.squareup.okhttp.Call call = systeminsightsListWindowsCrashesCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List System Insights Windows Crashes
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;type&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return List&lt;SystemInsightsWindowsCrashes&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SystemInsightsWindowsCrashes> systeminsightsListWindowsCrashes(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        ApiResponse<List<SystemInsightsWindowsCrashes>> resp = systeminsightsListWindowsCrashesWithHttpInfo(contentType, accept, limit, xOrgId, skip, filter);
        return resp.getData();
    }

    /**
     * List System Insights Windows Crashes
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;type&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @return ApiResponse&lt;List&lt;SystemInsightsWindowsCrashes&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SystemInsightsWindowsCrashes>> systeminsightsListWindowsCrashesWithHttpInfo(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter) throws ApiException {
        com.squareup.okhttp.Call call = systeminsightsListWindowsCrashesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, null, null);
        Type localVarReturnType = new TypeToken<List<SystemInsightsWindowsCrashes>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List System Insights Windows Crashes (asynchronously)
     * Valid filter fields are &#x60;system_id&#x60; and &#x60;type&#x60;.
     * @param contentType  (required)
     * @param accept  (required)
     * @param limit  (optional, default to 10)
     * @param xOrgId  (optional, default to )
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param filter Supported operators are: eq (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call systeminsightsListWindowsCrashesAsync(String contentType, String accept, Integer limit, String xOrgId, Integer skip, List<String> filter, final ApiCallback<List<SystemInsightsWindowsCrashes>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = systeminsightsListWindowsCrashesValidateBeforeCall(contentType, accept, limit, xOrgId, skip, filter, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SystemInsightsWindowsCrashes>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
