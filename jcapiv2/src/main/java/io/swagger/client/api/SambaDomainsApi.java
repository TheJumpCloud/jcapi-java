/*
 * JumpCloud APIs
 * V1 & V2 versions of JumpCloud's API. The next version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings. The most recent version of JumpCloud's API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Error;
import io.swagger.client.model.SambaDomainInput;
import io.swagger.client.model.SambaDomainOutput;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class SambaDomainsApi {
    private ApiClient apiClient;

    public SambaDomainsApi() {
        this(Configuration.getDefaultApiClient());
    }

    public SambaDomainsApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for ldapserversSambaDomainsDelete
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ldapserversSambaDomainsDeleteCall(String ldapserverId, String id, String contentType, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ldapservers/{ldapserver_id}/sambadomains/{id}"
            .replaceAll("\\{" + "ldapserver_id" + "\\}", apiClient.escapeString(ldapserverId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ldapserversSambaDomainsDeleteValidateBeforeCall(String ldapserverId, String id, String contentType, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ldapserverId' is set
        if (ldapserverId == null) {
            throw new ApiException("Missing the required parameter 'ldapserverId' when calling ldapserversSambaDomainsDelete(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ldapserversSambaDomainsDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = ldapserversSambaDomainsDeleteCall(ldapserverId, id, contentType, accept, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Samba Domain
     * This endpoint allows you to delete a samba domain from an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X DELETE https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @return String
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public String ldapserversSambaDomainsDelete(String ldapserverId, String id, String contentType, String accept) throws ApiException {
        ApiResponse<String> resp = ldapserversSambaDomainsDeleteWithHttpInfo(ldapserverId, id, contentType, accept);
        return resp.getData();
    }

    /**
     * Delete Samba Domain
     * This endpoint allows you to delete a samba domain from an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X DELETE https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @return ApiResponse&lt;String&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<String> ldapserversSambaDomainsDeleteWithHttpInfo(String ldapserverId, String id, String contentType, String accept) throws ApiException {
        com.squareup.okhttp.Call call = ldapserversSambaDomainsDeleteValidateBeforeCall(ldapserverId, id, contentType, accept, null, null);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Samba Domain (asynchronously)
     * This endpoint allows you to delete a samba domain from an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X DELETE https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ldapserversSambaDomainsDeleteAsync(String ldapserverId, String id, String contentType, String accept, final ApiCallback<String> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ldapserversSambaDomainsDeleteValidateBeforeCall(ldapserverId, id, contentType, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<String>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ldapserversSambaDomainsGet
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ldapserversSambaDomainsGetCall(String ldapserverId, String id, String contentType, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ldapservers/{ldapserver_id}/sambadomains/{id}"
            .replaceAll("\\{" + "ldapserver_id" + "\\}", apiClient.escapeString(ldapserverId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ldapserversSambaDomainsGetValidateBeforeCall(String ldapserverId, String id, String contentType, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ldapserverId' is set
        if (ldapserverId == null) {
            throw new ApiException("Missing the required parameter 'ldapserverId' when calling ldapserversSambaDomainsGet(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ldapserversSambaDomainsGet(Async)");
        }
        

        com.squareup.okhttp.Call call = ldapserversSambaDomainsGetCall(ldapserverId, id, contentType, accept, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Samba Domain
     * This endpoint returns a specific samba domain for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X GET \\   https://console.jumpcloud.com/api/v2/ldapservers/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39;   &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @return SambaDomainOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SambaDomainOutput ldapserversSambaDomainsGet(String ldapserverId, String id, String contentType, String accept) throws ApiException {
        ApiResponse<SambaDomainOutput> resp = ldapserversSambaDomainsGetWithHttpInfo(ldapserverId, id, contentType, accept);
        return resp.getData();
    }

    /**
     * Get Samba Domain
     * This endpoint returns a specific samba domain for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X GET \\   https://console.jumpcloud.com/api/v2/ldapservers/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39;   &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @return ApiResponse&lt;SambaDomainOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SambaDomainOutput> ldapserversSambaDomainsGetWithHttpInfo(String ldapserverId, String id, String contentType, String accept) throws ApiException {
        com.squareup.okhttp.Call call = ldapserversSambaDomainsGetValidateBeforeCall(ldapserverId, id, contentType, accept, null, null);
        Type localVarReturnType = new TypeToken<SambaDomainOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Get Samba Domain (asynchronously)
     * This endpoint returns a specific samba domain for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X GET \\   https://console.jumpcloud.com/api/v2/ldapservers/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39;   &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ldapserversSambaDomainsGetAsync(String ldapserverId, String id, String contentType, String accept, final ApiCallback<SambaDomainOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ldapserversSambaDomainsGetValidateBeforeCall(ldapserverId, id, contentType, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SambaDomainOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ldapserversSambaDomainsList
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param fields The comma separated fields included in the returned records. If omitted the default list of fields will be returned.  (optional)
     * @param filter Supported operators are: eq, ne, gt, ge, lt, le, between, search, in (optional)
     * @param limit The number of records to return at once. Limited to 100. (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending.  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ldapserversSambaDomainsListCall(String ldapserverId, String contentType, String accept, List<String> fields, List<String> filter, Integer limit, Integer skip, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/ldapservers/{ldapserver_id}/sambadomains"
            .replaceAll("\\{" + "ldapserver_id" + "\\}", apiClient.escapeString(ldapserverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (fields != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "fields", fields));
        if (filter != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "filter", filter));
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));
        if (sort != null)
        localVarCollectionQueryParams.addAll(apiClient.parameterToPairs("csv", "sort", sort));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ldapserversSambaDomainsListValidateBeforeCall(String ldapserverId, String contentType, String accept, List<String> fields, List<String> filter, Integer limit, Integer skip, List<String> sort, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ldapserverId' is set
        if (ldapserverId == null) {
            throw new ApiException("Missing the required parameter 'ldapserverId' when calling ldapserversSambaDomainsList(Async)");
        }
        

        com.squareup.okhttp.Call call = ldapserversSambaDomainsListCall(ldapserverId, contentType, accept, fields, filter, limit, skip, sort, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Samba Domains
     * This endpoint returns all samba domains for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39;   &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param fields The comma separated fields included in the returned records. If omitted the default list of fields will be returned.  (optional)
     * @param filter Supported operators are: eq, ne, gt, ge, lt, le, between, search, in (optional)
     * @param limit The number of records to return at once. Limited to 100. (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending.  (optional)
     * @return List&lt;SambaDomainOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<SambaDomainOutput> ldapserversSambaDomainsList(String ldapserverId, String contentType, String accept, List<String> fields, List<String> filter, Integer limit, Integer skip, List<String> sort) throws ApiException {
        ApiResponse<List<SambaDomainOutput>> resp = ldapserversSambaDomainsListWithHttpInfo(ldapserverId, contentType, accept, fields, filter, limit, skip, sort);
        return resp.getData();
    }

    /**
     * List Samba Domains
     * This endpoint returns all samba domains for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39;   &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param fields The comma separated fields included in the returned records. If omitted the default list of fields will be returned.  (optional)
     * @param filter Supported operators are: eq, ne, gt, ge, lt, le, between, search, in (optional)
     * @param limit The number of records to return at once. Limited to 100. (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending.  (optional)
     * @return ApiResponse&lt;List&lt;SambaDomainOutput&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<SambaDomainOutput>> ldapserversSambaDomainsListWithHttpInfo(String ldapserverId, String contentType, String accept, List<String> fields, List<String> filter, Integer limit, Integer skip, List<String> sort) throws ApiException {
        com.squareup.okhttp.Call call = ldapserversSambaDomainsListValidateBeforeCall(ldapserverId, contentType, accept, fields, filter, limit, skip, sort, null, null);
        Type localVarReturnType = new TypeToken<List<SambaDomainOutput>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Samba Domains (asynchronously)
     * This endpoint returns all samba domains for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X GET https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39;   &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param fields The comma separated fields included in the returned records. If omitted the default list of fields will be returned.  (optional)
     * @param filter Supported operators are: eq, ne, gt, ge, lt, le, between, search, in (optional)
     * @param limit The number of records to return at once. Limited to 100. (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param sort The comma separated fields used to sort the collection. Default sort is ascending, prefix with &#x60;-&#x60; to sort descending.  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ldapserversSambaDomainsListAsync(String ldapserverId, String contentType, String accept, List<String> fields, List<String> filter, Integer limit, Integer skip, List<String> sort, final ApiCallback<List<SambaDomainOutput>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ldapserversSambaDomainsListValidateBeforeCall(ldapserverId, contentType, accept, fields, filter, limit, skip, sort, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<SambaDomainOutput>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ldapserversSambaDomainsPost
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param body  (optional)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ldapserversSambaDomainsPostCall(String ldapserverId, SambaDomainInput body, String contentType, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/ldapservers/{ldapserver_id}/sambadomains"
            .replaceAll("\\{" + "ldapserver_id" + "\\}", apiClient.escapeString(ldapserverId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ldapserversSambaDomainsPostValidateBeforeCall(String ldapserverId, SambaDomainInput body, String contentType, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ldapserverId' is set
        if (ldapserverId == null) {
            throw new ApiException("Missing the required parameter 'ldapserverId' when calling ldapserversSambaDomainsPost(Async)");
        }
        

        com.squareup.okhttp.Call call = ldapserversSambaDomainsPostCall(ldapserverId, body, contentType, accept, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create Samba Domain
     * This endpoint allows you to create a samba domain for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; \\   -d &#39;{ \&quot;sid\&quot;:\&quot;{SID_ID}\&quot;,  \&quot;name\&quot;:\&quot;{WORKGROUP_NAME}\&quot;  }&#39; &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param body  (optional)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @return SambaDomainOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SambaDomainOutput ldapserversSambaDomainsPost(String ldapserverId, SambaDomainInput body, String contentType, String accept) throws ApiException {
        ApiResponse<SambaDomainOutput> resp = ldapserversSambaDomainsPostWithHttpInfo(ldapserverId, body, contentType, accept);
        return resp.getData();
    }

    /**
     * Create Samba Domain
     * This endpoint allows you to create a samba domain for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; \\   -d &#39;{ \&quot;sid\&quot;:\&quot;{SID_ID}\&quot;,  \&quot;name\&quot;:\&quot;{WORKGROUP_NAME}\&quot;  }&#39; &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param body  (optional)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @return ApiResponse&lt;SambaDomainOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SambaDomainOutput> ldapserversSambaDomainsPostWithHttpInfo(String ldapserverId, SambaDomainInput body, String contentType, String accept) throws ApiException {
        com.squareup.okhttp.Call call = ldapserversSambaDomainsPostValidateBeforeCall(ldapserverId, body, contentType, accept, null, null);
        Type localVarReturnType = new TypeToken<SambaDomainOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create Samba Domain (asynchronously)
     * This endpoint allows you to create a samba domain for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X POST https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; \\   -d &#39;{ \&quot;sid\&quot;:\&quot;{SID_ID}\&quot;,  \&quot;name\&quot;:\&quot;{WORKGROUP_NAME}\&quot;  }&#39; &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param body  (optional)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ldapserversSambaDomainsPostAsync(String ldapserverId, SambaDomainInput body, String contentType, String accept, final ApiCallback<SambaDomainOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ldapserversSambaDomainsPostValidateBeforeCall(ldapserverId, body, contentType, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SambaDomainOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for ldapserversSambaDomainsPut
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param body  (optional)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call ldapserversSambaDomainsPutCall(String ldapserverId, String id, SambaDomainInput body, String contentType, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/ldapservers/{ldapserver_id}/sambadomains/{id}"
            .replaceAll("\\{" + "ldapserver_id" + "\\}", apiClient.escapeString(ldapserverId.toString()))
            .replaceAll("\\{" + "id" + "\\}", apiClient.escapeString(id.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();
        if (contentType != null)
        localVarHeaderParams.put("Content-Type", apiClient.parameterToString(contentType));
        if (accept != null)
        localVarHeaderParams.put("Accept", apiClient.parameterToString(accept));

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call ldapserversSambaDomainsPutValidateBeforeCall(String ldapserverId, String id, SambaDomainInput body, String contentType, String accept, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'ldapserverId' is set
        if (ldapserverId == null) {
            throw new ApiException("Missing the required parameter 'ldapserverId' when calling ldapserversSambaDomainsPut(Async)");
        }
        
        // verify the required parameter 'id' is set
        if (id == null) {
            throw new ApiException("Missing the required parameter 'id' when calling ldapserversSambaDomainsPut(Async)");
        }
        

        com.squareup.okhttp.Call call = ldapserversSambaDomainsPutCall(ldapserverId, id, body, contentType, accept, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Samba Domain
     * This endpoint allows you to update the samba domain information for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X PUT https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; \\   -d &#39;{ \&quot;sid\&quot;:\&quot;{SID_ID}\&quot;,  \&quot;name\&quot;:\&quot;{WORKGROUP_NAME}\&quot; }&#39;  &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param body  (optional)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @return SambaDomainOutput
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public SambaDomainOutput ldapserversSambaDomainsPut(String ldapserverId, String id, SambaDomainInput body, String contentType, String accept) throws ApiException {
        ApiResponse<SambaDomainOutput> resp = ldapserversSambaDomainsPutWithHttpInfo(ldapserverId, id, body, contentType, accept);
        return resp.getData();
    }

    /**
     * Update Samba Domain
     * This endpoint allows you to update the samba domain information for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X PUT https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; \\   -d &#39;{ \&quot;sid\&quot;:\&quot;{SID_ID}\&quot;,  \&quot;name\&quot;:\&quot;{WORKGROUP_NAME}\&quot; }&#39;  &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param body  (optional)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @return ApiResponse&lt;SambaDomainOutput&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<SambaDomainOutput> ldapserversSambaDomainsPutWithHttpInfo(String ldapserverId, String id, SambaDomainInput body, String contentType, String accept) throws ApiException {
        com.squareup.okhttp.Call call = ldapserversSambaDomainsPutValidateBeforeCall(ldapserverId, id, body, contentType, accept, null, null);
        Type localVarReturnType = new TypeToken<SambaDomainOutput>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Samba Domain (asynchronously)
     * This endpoint allows you to update the samba domain information for an LDAP server.  ##### Sample Request &#x60;&#x60;&#x60; curl -X PUT https://console.jumpcloud.com/api/v2/ldapservers/{LDAP_ID}/sambadomains/{SAMBA_ID} \\   -H &#39;Accept: application/json&#39; \\   -H &#39;Content-Type: application/json&#39; \\   -H &#39;x-api-key: {API_KEY}&#39; \\   -d &#39;{ \&quot;sid\&quot;:\&quot;{SID_ID}\&quot;,  \&quot;name\&quot;:\&quot;{WORKGROUP_NAME}\&quot; }&#39;  &#x60;&#x60;&#x60;
     * @param ldapserverId Unique identifier of the LDAP server. (required)
     * @param id Unique identifier of the samba domain. (required)
     * @param body  (optional)
     * @param contentType  (optional, default to application/json)
     * @param accept  (optional, default to application/json)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call ldapserversSambaDomainsPutAsync(String ldapserverId, String id, SambaDomainInput body, String contentType, String accept, final ApiCallback<SambaDomainOutput> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = ldapserversSambaDomainsPutValidateBeforeCall(ldapserverId, id, body, contentType, accept, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<SambaDomainOutput>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
