/*
 * JumpCloud APIs
 *  JumpCloud's V2 API. This set of endpoints allows JumpCloud customers to manage objects, groupings and mappings and interact with the JumpCloud Graph.
 *
 * OpenAPI spec version: 2.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */


package io.swagger.client.api;

import io.swagger.client.ApiCallback;
import io.swagger.client.ApiClient;
import io.swagger.client.ApiException;
import io.swagger.client.ApiResponse;
import io.swagger.client.Configuration;
import io.swagger.client.Pair;
import io.swagger.client.ProgressRequestBody;
import io.swagger.client.ProgressResponseBody;

import com.google.gson.reflect.TypeToken;

import java.io.IOException;


import io.swagger.client.model.Body1;
import io.swagger.client.model.Body2;
import io.swagger.client.model.JcEnrollmentProfile;

import java.lang.reflect.Type;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

public class DefaultApi {
    private ApiClient apiClient;

    public DefaultApi() {
        this(Configuration.getDefaultApiClient());
    }

    public DefaultApi(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    public ApiClient getApiClient() {
        return apiClient;
    }

    public void setApiClient(ApiClient apiClient) {
        this.apiClient = apiClient;
    }

    /**
     * Build call for jcEnrollmentProfilesDelete
     * @param enrollmentProfileId  (required)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jcEnrollmentProfilesDeleteCall(String enrollmentProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enrollmentprofiles/{enrollment_profile_id}"
            .replaceAll("\\{" + "enrollment_profile_id" + "\\}", apiClient.escapeString(enrollmentProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "DELETE", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jcEnrollmentProfilesDeleteValidateBeforeCall(String enrollmentProfileId, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'enrollmentProfileId' is set
        if (enrollmentProfileId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentProfileId' when calling jcEnrollmentProfilesDelete(Async)");
        }
        

        com.squareup.okhttp.Call call = jcEnrollmentProfilesDeleteCall(enrollmentProfileId, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Delete Enrollment Profile
     * 
     * @param enrollmentProfileId  (required)
     * @return JcEnrollmentProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JcEnrollmentProfile jcEnrollmentProfilesDelete(String enrollmentProfileId) throws ApiException {
        ApiResponse<JcEnrollmentProfile> resp = jcEnrollmentProfilesDeleteWithHttpInfo(enrollmentProfileId);
        return resp.getData();
    }

    /**
     * Delete Enrollment Profile
     * 
     * @param enrollmentProfileId  (required)
     * @return ApiResponse&lt;JcEnrollmentProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JcEnrollmentProfile> jcEnrollmentProfilesDeleteWithHttpInfo(String enrollmentProfileId) throws ApiException {
        com.squareup.okhttp.Call call = jcEnrollmentProfilesDeleteValidateBeforeCall(enrollmentProfileId, null, null);
        Type localVarReturnType = new TypeToken<JcEnrollmentProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Delete Enrollment Profile (asynchronously)
     * 
     * @param enrollmentProfileId  (required)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jcEnrollmentProfilesDeleteAsync(String enrollmentProfileId, final ApiCallback<JcEnrollmentProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jcEnrollmentProfilesDeleteValidateBeforeCall(enrollmentProfileId, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JcEnrollmentProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for jcEnrollmentProfilesGet
     * @param enrollmentProfileId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jcEnrollmentProfilesGetCall(String enrollmentProfileId, JcEnrollmentProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/enrollmentprofiles/{enrollment_profile_id}"
            .replaceAll("\\{" + "enrollment_profile_id" + "\\}", apiClient.escapeString(enrollmentProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jcEnrollmentProfilesGetValidateBeforeCall(String enrollmentProfileId, JcEnrollmentProfile body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'enrollmentProfileId' is set
        if (enrollmentProfileId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentProfileId' when calling jcEnrollmentProfilesGet(Async)");
        }
        

        com.squareup.okhttp.Call call = jcEnrollmentProfilesGetCall(enrollmentProfileId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Get Enrollment Profile
     * 
     * @param enrollmentProfileId  (required)
     * @param body  (optional)
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public void jcEnrollmentProfilesGet(String enrollmentProfileId, JcEnrollmentProfile body) throws ApiException {
        jcEnrollmentProfilesGetWithHttpInfo(enrollmentProfileId, body);
    }

    /**
     * Get Enrollment Profile
     * 
     * @param enrollmentProfileId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;Void&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<Void> jcEnrollmentProfilesGetWithHttpInfo(String enrollmentProfileId, JcEnrollmentProfile body) throws ApiException {
        com.squareup.okhttp.Call call = jcEnrollmentProfilesGetValidateBeforeCall(enrollmentProfileId, body, null, null);
        return apiClient.execute(call);
    }

    /**
     * Get Enrollment Profile (asynchronously)
     * 
     * @param enrollmentProfileId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jcEnrollmentProfilesGetAsync(String enrollmentProfileId, JcEnrollmentProfile body, final ApiCallback<Void> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jcEnrollmentProfilesGetValidateBeforeCall(enrollmentProfileId, body, progressListener, progressRequestListener);
        apiClient.executeAsync(call, callback);
        return call;
    }
    /**
     * Build call for jcEnrollmentProfilesList
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jcEnrollmentProfilesListCall(Integer limit, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = null;

        // create path and map variables
        String localVarPath = "/enrollmentprofiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();
        if (limit != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("limit", limit));
        if (skip != null)
        localVarQueryParams.addAll(apiClient.parameterToPair("skip", skip));

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "GET", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jcEnrollmentProfilesListValidateBeforeCall(Integer limit, Integer skip, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = jcEnrollmentProfilesListCall(limit, skip, progressListener, progressRequestListener);
        return call;

    }

    /**
     * List Enrollment Profiles
     * 
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @return List&lt;JcEnrollmentProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public List<JcEnrollmentProfile> jcEnrollmentProfilesList(Integer limit, Integer skip) throws ApiException {
        ApiResponse<List<JcEnrollmentProfile>> resp = jcEnrollmentProfilesListWithHttpInfo(limit, skip);
        return resp.getData();
    }

    /**
     * List Enrollment Profiles
     * 
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @return ApiResponse&lt;List&lt;JcEnrollmentProfile&gt;&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<List<JcEnrollmentProfile>> jcEnrollmentProfilesListWithHttpInfo(Integer limit, Integer skip) throws ApiException {
        com.squareup.okhttp.Call call = jcEnrollmentProfilesListValidateBeforeCall(limit, skip, null, null);
        Type localVarReturnType = new TypeToken<List<JcEnrollmentProfile>>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * List Enrollment Profiles (asynchronously)
     * 
     * @param limit  (optional, default to 10)
     * @param skip The offset into the records to return. (optional, default to 0)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jcEnrollmentProfilesListAsync(Integer limit, Integer skip, final ApiCallback<List<JcEnrollmentProfile>> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jcEnrollmentProfilesListValidateBeforeCall(limit, skip, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<List<JcEnrollmentProfile>>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for jcEnrollmentProfilesPost
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jcEnrollmentProfilesPostCall(Body1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/enrollmentprofiles";

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "POST", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jcEnrollmentProfilesPostValidateBeforeCall(Body1 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        

        com.squareup.okhttp.Call call = jcEnrollmentProfilesPostCall(body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Create new Enrollment Profile
     * 
     * @param body  (optional)
     * @return JcEnrollmentProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JcEnrollmentProfile jcEnrollmentProfilesPost(Body1 body) throws ApiException {
        ApiResponse<JcEnrollmentProfile> resp = jcEnrollmentProfilesPostWithHttpInfo(body);
        return resp.getData();
    }

    /**
     * Create new Enrollment Profile
     * 
     * @param body  (optional)
     * @return ApiResponse&lt;JcEnrollmentProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JcEnrollmentProfile> jcEnrollmentProfilesPostWithHttpInfo(Body1 body) throws ApiException {
        com.squareup.okhttp.Call call = jcEnrollmentProfilesPostValidateBeforeCall(body, null, null);
        Type localVarReturnType = new TypeToken<JcEnrollmentProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Create new Enrollment Profile (asynchronously)
     * 
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jcEnrollmentProfilesPostAsync(Body1 body, final ApiCallback<JcEnrollmentProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jcEnrollmentProfilesPostValidateBeforeCall(body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JcEnrollmentProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
    /**
     * Build call for jcEnrollmentProfilesPut
     * @param enrollmentProfileId  (required)
     * @param body  (optional)
     * @param progressListener Progress listener
     * @param progressRequestListener Progress request listener
     * @return Call to execute
     * @throws ApiException If fail to serialize the request body object
     */
    public com.squareup.okhttp.Call jcEnrollmentProfilesPutCall(String enrollmentProfileId, Body2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        Object localVarPostBody = body;

        // create path and map variables
        String localVarPath = "/enrollmentprofiles/{enrollment_profile_id}"
            .replaceAll("\\{" + "enrollment_profile_id" + "\\}", apiClient.escapeString(enrollmentProfileId.toString()));

        List<Pair> localVarQueryParams = new ArrayList<Pair>();
        List<Pair> localVarCollectionQueryParams = new ArrayList<Pair>();

        Map<String, String> localVarHeaderParams = new HashMap<String, String>();

        Map<String, Object> localVarFormParams = new HashMap<String, Object>();

        final String[] localVarAccepts = {
            "application/json"
        };
        final String localVarAccept = apiClient.selectHeaderAccept(localVarAccepts);
        if (localVarAccept != null) localVarHeaderParams.put("Accept", localVarAccept);

        final String[] localVarContentTypes = {
            "application/json"
        };
        final String localVarContentType = apiClient.selectHeaderContentType(localVarContentTypes);
        localVarHeaderParams.put("Content-Type", localVarContentType);

        if(progressListener != null) {
            apiClient.getHttpClient().networkInterceptors().add(new com.squareup.okhttp.Interceptor() {
                @Override
                public com.squareup.okhttp.Response intercept(com.squareup.okhttp.Interceptor.Chain chain) throws IOException {
                    com.squareup.okhttp.Response originalResponse = chain.proceed(chain.request());
                    return originalResponse.newBuilder()
                    .body(new ProgressResponseBody(originalResponse.body(), progressListener))
                    .build();
                }
            });
        }

        String[] localVarAuthNames = new String[] { "x-api-key" };
        return apiClient.buildCall(localVarPath, "PUT", localVarQueryParams, localVarCollectionQueryParams, localVarPostBody, localVarHeaderParams, localVarFormParams, localVarAuthNames, progressRequestListener);
    }

    @SuppressWarnings("rawtypes")
    private com.squareup.okhttp.Call jcEnrollmentProfilesPutValidateBeforeCall(String enrollmentProfileId, Body2 body, final ProgressResponseBody.ProgressListener progressListener, final ProgressRequestBody.ProgressRequestListener progressRequestListener) throws ApiException {
        
        // verify the required parameter 'enrollmentProfileId' is set
        if (enrollmentProfileId == null) {
            throw new ApiException("Missing the required parameter 'enrollmentProfileId' when calling jcEnrollmentProfilesPut(Async)");
        }
        

        com.squareup.okhttp.Call call = jcEnrollmentProfilesPutCall(enrollmentProfileId, body, progressListener, progressRequestListener);
        return call;

    }

    /**
     * Update Enrollment Profile
     * 
     * @param enrollmentProfileId  (required)
     * @param body  (optional)
     * @return JcEnrollmentProfile
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public JcEnrollmentProfile jcEnrollmentProfilesPut(String enrollmentProfileId, Body2 body) throws ApiException {
        ApiResponse<JcEnrollmentProfile> resp = jcEnrollmentProfilesPutWithHttpInfo(enrollmentProfileId, body);
        return resp.getData();
    }

    /**
     * Update Enrollment Profile
     * 
     * @param enrollmentProfileId  (required)
     * @param body  (optional)
     * @return ApiResponse&lt;JcEnrollmentProfile&gt;
     * @throws ApiException If fail to call the API, e.g. server error or cannot deserialize the response body
     */
    public ApiResponse<JcEnrollmentProfile> jcEnrollmentProfilesPutWithHttpInfo(String enrollmentProfileId, Body2 body) throws ApiException {
        com.squareup.okhttp.Call call = jcEnrollmentProfilesPutValidateBeforeCall(enrollmentProfileId, body, null, null);
        Type localVarReturnType = new TypeToken<JcEnrollmentProfile>(){}.getType();
        return apiClient.execute(call, localVarReturnType);
    }

    /**
     * Update Enrollment Profile (asynchronously)
     * 
     * @param enrollmentProfileId  (required)
     * @param body  (optional)
     * @param callback The callback to be executed when the API call finishes
     * @return The request call
     * @throws ApiException If fail to process the API call, e.g. serializing the request body object
     */
    public com.squareup.okhttp.Call jcEnrollmentProfilesPutAsync(String enrollmentProfileId, Body2 body, final ApiCallback<JcEnrollmentProfile> callback) throws ApiException {

        ProgressResponseBody.ProgressListener progressListener = null;
        ProgressRequestBody.ProgressRequestListener progressRequestListener = null;

        if (callback != null) {
            progressListener = new ProgressResponseBody.ProgressListener() {
                @Override
                public void update(long bytesRead, long contentLength, boolean done) {
                    callback.onDownloadProgress(bytesRead, contentLength, done);
                }
            };

            progressRequestListener = new ProgressRequestBody.ProgressRequestListener() {
                @Override
                public void onRequestProgress(long bytesWritten, long contentLength, boolean done) {
                    callback.onUploadProgress(bytesWritten, contentLength, done);
                }
            };
        }

        com.squareup.okhttp.Call call = jcEnrollmentProfilesPutValidateBeforeCall(enrollmentProfileId, body, progressListener, progressRequestListener);
        Type localVarReturnType = new TypeToken<JcEnrollmentProfile>(){}.getType();
        apiClient.executeAsync(call, localVarReturnType, callback);
        return call;
    }
}
